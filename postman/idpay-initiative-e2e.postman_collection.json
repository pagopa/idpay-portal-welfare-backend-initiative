{
	"info": {
		"_postman_id": "b2c7f07e-dc6d-4478-96f6-0db1c75fd822",
		"name": "Initiative with whitelist  FIXED_STEP_4 - e2e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26036679"
	},
	"item": [
		{
			"name": "Happy Case",
			"item": [
				{
					"name": "ENTE - Initiative Creation",
					"item": [
						{
							"name": "Generate Portal Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Retrieve Token', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/welfare/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"welfare",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "STEP1-Insert Initiative (Service Info)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
											"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
											"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
											"\r",
											"pm.collectionVariables.set('channel_type', 'web');\r",
											"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"// console.log('jsondata', jsonData);\r",
											"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
											"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
											"\r",
											"pm.test(\"Status test 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/info",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"info"
									]
								},
								"description": "Save initiative and first subset of data 'general info'"
							},
							"response": []
						},
						{
							"name": "STEP2-Update Initiative (general Info) - DRAFT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let moment = require('moment');\r",
											"//Format: YYYY-MM-DD\r",
											"let today = String(moment().format('YYYY-MM-DD'));\r",
											"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
											"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
											"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
											"\r",
											"/*\r",
											"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
											"pm.collectionVariables.set('...', _.random(0, 180));\r",
											"*/\r",
											"//_.floor(_.random(1.0, 100000.0, true),2)\r",
											"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
											"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
											"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
											"pm.collectionVariables.set('beneficiaryKnown', true);\r",
											"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
											"pm.collectionVariables.set('rankingStartDate', today);\r",
											"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
											"pm.collectionVariables.set('startDate', todayP2);\r",
											"pm.collectionVariables.set('endDate', todayP3);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/general/draft",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"general",
										"draft"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								},
								"description": "Save initiative and first subset of data 'general info'"
							},
							"response": []
						},
						{
							"name": "STEP2-Update Initiative (general Info)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let moment = require('moment');\r",
											"//Format: YYYY-MM-DD\r",
											"let today = String(moment().format('YYYY-MM-DD'));\r",
											"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
											"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
											"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
											"\r",
											"/*\r",
											"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
											"pm.collectionVariables.set('...', _.random(0, 180));\r",
											"*/\r",
											"//_.floor(_.random(1.0, 100000.0, true),2)\r",
											"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
											"pm.collectionVariables.set('budget', 20);\r",
											"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
											"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
											"pm.collectionVariables.set('beneficiaryKnown', true);\r",
											"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
											"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
											"pm.collectionVariables.set('rankingStartDate', today);\r",
											"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
											"pm.collectionVariables.set('startDate', todayP2);\r",
											"pm.collectionVariables.set('endDate', todayP3);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/general",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"general"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								},
								"description": "Save initiative and first subset of data 'general info'"
							},
							"response": []
						},
						{
							"name": "STEP3 Update Groups - upload correct file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse).have.property(\"status\");\r",
											"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
											"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/ranaldoda/Desktop/Portale_enti_test/Initiative_with_whitelist/example_fiscal_code.csv"
										}
									]
								},
								"url": {
									"raw": "{{baseUrlGroup}}/:initiativeId/upload",
									"host": [
										"{{baseUrlGroup}}"
									],
									"path": [
										":initiativeId",
										"upload"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "STEP4-Update Initiative Trx-Reward rules - DRAFT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const d = new Date();\r",
											"dateString = d.toISOString()\r",
											"let endTime = dateString.split('T');\r",
											"endTime = endTime[1].split('Z');\r",
											"\r",
											"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
											"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
											"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
											"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
											"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
											"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
											"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
											"} else {\r",
											"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
											"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
											"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
											"pm.collectionVariables.set('trxThresholdTo', 50);\r",
											"pm.collectionVariables.set('trxCountFrom', 3);\r",
											"pm.collectionVariables.set('trxCountTo', 11);\r",
											"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
											"pm.collectionVariables.set('trxRewardLimitValue', 3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/reward/draft",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"reward",
										"draft"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "STEP4-Update Initiative Trx-Reward rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const d = new Date();\r",
											"dateString = d.toISOString()\r",
											"let endTime = dateString.split('T');\r",
											"endTime = endTime[1].split('Z');\r",
											"\r",
											"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
											"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
											"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
											"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
											"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
											"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
											"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
											"} else {\r",
											"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
											"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
											"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
											"pm.collectionVariables.set('trxThresholdTo', 50);\r",
											"pm.collectionVariables.set('trxCountFrom', 3);\r",
											"pm.collectionVariables.set('trxCountTo', 11);\r",
											"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
											"pm.collectionVariables.set('trxRewardLimitValue', 3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"reward"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "STEP5-Update Initiative Refund Rule - DRAFT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
											"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
											"\r",
											"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
											"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"timeParameter\": {\n        \"timeType\": \"{{timeType}}\"\n    },\n    \"additionalInfo\": {\n        \"identificationCode\": \"{{identificationCode}}\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/refund/draft",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"refund",
										"draft"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "STEP5-Update Initiative Refund Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
											"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
											"\r",
											"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
											"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
											"\r",
											"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
											"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
											"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
											"*/\r",
											"\r",
											"\r",
											"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
											"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
											"\r",
											"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
											"let body = {};\r",
											"if (refundTypeSelected == \"timeParameter\") {\r",
											"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
											"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
											"    body = {\r",
											"        timeParameter: {\r",
											"            timeType: timeType[timeTypeRandomIndex]\r",
											"        }\r",
											"    };\r",
											"} else {\r",
											"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
											"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
											"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
											"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
											"        body = {\r",
											"            accumulatedAmount: {\r",
											"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
											"            }\r",
											"        };\r",
											"    } else {\r",
											"        body = {\r",
											"            accumulatedAmount: {\r",
											"                accumulatedType: \"THRESHOLD_REACHED\",\r",
											"                refundThreshold: 10\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"}\r",
											"console.log(body);\r",
											"pm.collectionVariables.set('body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"refund"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "PAGOPA - Initiative update status TO_CHECK",
					"item": [
						{
							"name": "Generate Portal Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Retrieve Token', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"pagopa_admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/welfare/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"welfare",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update initiative into TO_CHECK status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//setTimeout(function(){}, 20000); //milliseconds"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalTokenPagopa}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId}}/rejected",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId}}",
										"rejected"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ENTE - Initiative Update",
					"item": [
						{
							"name": "Generate Portal Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Retrieve Token', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/welfare/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"welfare",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "STEP1-Insert Initiative (Service Info)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId}}/info",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId}}",
										"info"
									]
								},
								"description": "Save initiative and first subset of data 'general info'"
							},
							"response": []
						},
						{
							"name": "STEP1-Insert Initiative Logo (Service Info)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "logo",
											"type": "file",
											"src": "{{basePath}}/sky.PNG"
										}
									]
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId}}/logo",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId}}",
										"logo"
									]
								},
								"description": "Save initiative and first subset of data 'general info'"
							},
							"response": []
						},
						{
							"name": "STEP2-Update Initiative (general Info)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let moment = require('moment');\r",
											"//Format: YYYY-MM-DD\r",
											"let today = String(moment().format('YYYY-MM-DD'));\r",
											"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
											"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
											"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
											"\r",
											"/*\r",
											"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
											"pm.collectionVariables.set('...', _.random(0, 180));\r",
											"*/\r",
											"//_.floor(_.random(1.0, 100000.0, true),2)\r",
											"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
											"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
											"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
											"pm.collectionVariables.set('beneficiaryKnown', true);\r",
											"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
											"pm.collectionVariables.set('rankingStartDate', today);\r",
											"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
											"pm.collectionVariables.set('startDate', todayP2);\r",
											"pm.collectionVariables.set('endDate', todayP3);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/general",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"general"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								},
								"description": "Save initiative and first subset of data 'general info'"
							},
							"response": []
						},
						{
							"name": "STEP3 Update Groups - upload correct file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify response body\", function () {\r",
											"    let jsonResponse = pm.response.json();\r",
											"    pm.expect(jsonResponse).have.property(\"status\");\r",
											"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
											"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/ranaldoda/Desktop/Portale_enti_test/Initiative_with_whitelist/example_fiscal_code.csv"
										}
									]
								},
								"url": {
									"raw": "{{baseUrlGroup}}/:initiativeId/upload",
									"host": [
										"{{baseUrlGroup}}"
									],
									"path": [
										":initiativeId",
										"upload"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "STEP4-Update Initiative Trx-Reward rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const d = new Date();\r",
											"dateString = d.toISOString()\r",
											"let endTime = dateString.split('T');\r",
											"endTime = endTime[1].split('Z');\r",
											"\r",
											"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
											"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
											"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
											"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
											"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
											"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
											"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
											"} else {\r",
											"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
											"}\r",
											"\r",
											"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
											"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
											"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
											"pm.collectionVariables.set('trxThresholdTo', 50);\r",
											"pm.collectionVariables.set('trxCountFrom', 3);\r",
											"pm.collectionVariables.set('trxCountTo', 11);\r",
											"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
											"pm.collectionVariables.set('trxRewardLimitValue', 3);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"reward"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "STEP5-Update Initiative Refund Rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
											"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
											"\r",
											"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
											"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
											"\r",
											"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
											"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
											"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
											"*/\r",
											"\r",
											"\r",
											"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
											"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
											"\r",
											"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
											"let body = {};\r",
											"if (refundTypeSelected == \"timeParameter\") {\r",
											"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
											"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
											"    body = {\r",
											"        timeParameter: {\r",
											"            timeType: timeType[timeTypeRandomIndex]\r",
											"        }\r",
											"    };\r",
											"} else {\r",
											"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
											"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
											"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
											"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
											"        body = {\r",
											"            accumulatedAmount: {\r",
											"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
											"            }\r",
											"        };\r",
											"    } else {\r",
											"        body = {\r",
											"            accumulatedAmount: {\r",
											"                accumulatedType: \"THRESHOLD_REACHED\",\r",
											"                refundThreshold: 10\r",
											"            }\r",
											"        };\r",
											"    }\r",
											"}\r",
											"console.log(body);\r",
											"pm.collectionVariables.set('body', JSON.stringify(body));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										":initiativeId",
										"refund"
									],
									"variable": [
										{
											"key": "initiativeId",
											"value": "{{initiativeId}}",
											"description": "(Required) The initiative ID"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PAGOPA - Initiative update status APPROVED",
					"item": [
						{
							"name": "Generate Portal Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Retrieve Token', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"pagopa_admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/welfare/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"welfare",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update initiative into APPROVED status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//setTimeout(function(){}, 20000); //milliseconds"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalTokenPagopa}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId}}",
										"approved"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ENTE - Initiative PUBLISHED",
					"item": [
						{
							"name": "Generate Portal Token Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Retrieve Token', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/welfare/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"welfare",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Initiative PUBLISHED",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"/*let body;\r",
											"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
											"if(baseUrlInitiative.includes('localhost')){\r",
											"    body = {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            organizationName: 'Comune di Milano',\r",
											"            organizationFiscalCode: '11122233344',\r",
											"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
											"            organizationUserRole: 'admin'\r",
											"        })\r",
											"    }\r",
											"    pm.request.headers.add({\r",
											"        key: \"Content-Type\",\r",
											"        value: \"application/json\"\r",
											"    });\r",
											"    pm.variables.set('body', JSON.stringify(body));\r",
											"    pm.request.body.update(body);\r",
											"}\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId}}",
										"published"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Unhappy Case",
			"item": [
				{
					"name": "ENTE - Initiative Creation",
					"item": [
						{
							"name": "Step 1 - Insert Initiaitve",
							"item": [
								{
									"name": "PAGOPA try to create initiative - 400",
									"item": [
										{
											"name": "Generate Portal Token Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"pagopa_admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info) Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Message test\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.message).to.eql('Permission not valid for [pagopa_admin]');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative Creation Insert required field empty - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info) - required field empty",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Message test\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.message).to.eql('Cannot coerce empty String (\\\"\\\") to `it.gov.pagopa.initiative.dto.InitiativeAdditionalDTO$ServiceScope` value (but could if coercion was enabled using `CoercionConfig`)');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"\",\n    \"serviceScope\": \"\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Step 2 - General info",
							"item": [
								{
									"name": "ENTE - required field empty - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info) required field empty",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Message test\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.message).to.oneOf(['[beneficiaryType]: must not be null - [initiativeGeneralDTO]: Dates inserted do not meet the business case requirements','[initiativeGeneralDTO]: Dates inserted do not meet the business case requirements - [beneficiaryType]: must not be null']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - beneficiary budget greater than budget - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info) beneficiary budget greater than budget",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Message test\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.message).to.eql('[initiativeGeneralDTO]: beneficiaryBudget cannot be greater than budget, or equal');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - ranking end date not future date - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info) ranking end date not future date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', todayP1);\r",
															"pm.collectionVariables.set('rankingEndDate', today);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Message test\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.message).to.oneOf(['[rankingEndDate]: must be a future date - [initiativeGeneralDTO]: Dates inserted do not meet the business case requirements','[initiativeGeneralDTO]: Dates inserted do not meet the business case requirements - [rankingEndDate]: must be a future date']);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Step 3 - Upload file",
							"item": [
								{
									"name": "ENTE - Initiative Creation Upload empty file - 200 KO",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload empty file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('KO');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
															"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.empty');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/empty_file.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ENTE - Initiative Creation Upload wrong file - 200 KO",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload wrong file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('KO');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
															"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.cf.wrong');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/wrong_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ENTE - Initiative Creation Upload greater CF than beneficiary budget - 200 KO",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload greater CF than beneficiary budget file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('KO');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
															"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.beneficiary.number.budget');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/greater_than_beneficiary_budget_fiscal_code_.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ENTE - Initiative Creation Upload invalid file - 200 KO",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload Invalid file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('KO');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
															"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.format');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/invalid_format.xlsx"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "ENTE - Initiative Creation Upload large file - 200 KO",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload Invalid file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('KO');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
															"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.size');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/ps_fiscal_code_groups_file_large(+2mb).csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "Step 4 - Reward rules",
							"item": [
								{
									"name": "ENTE - Initiative Reward rules field empty - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules field empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Message test\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.message).to.eql(\"Could not resolve type id '' as a subtype of `it.gov.pagopa.initiative.dto.rule.reward.InitiativeRewardRuleDTO`: known type ids = [rewardGroups, rewardValue] (for POJO property 'rewardRule')\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"\",\n    \"rewardValue\": \"\",\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative Reward rules end time empty - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules end time empty",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Message test\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.message).to.eql(\"[trxRule.daysOfWeek[0].intervals[0].endTime]: must not be null\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": \"{{rewardRuleValue}}\",\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative Reward mcc filter empty array - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules mcc filter empty array",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Message test\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.message).to.eql(\"[trxRule.mccFilter.values]: must not be empty\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": \"{{rewardRuleValue}}\",\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Step 5 - Refund rule",
							"item": [
								{
									"name": "ENTE - Refund rule",
									"item": [
										{
											"name": "ENTE - Refund rule time parameter empty - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Retrieve Token', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r",
																	"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Status test 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 204\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Message test\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.message).to.oneOf([\"[timeParameter.timeType]: must not be null\",\"[accumulatedAmount.accumulatedType]: must not be null\"]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: \"\"\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"console.log(body);\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule time parameter empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Message test\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.message).to.eql(\"[timeParameter.timeType]: must not be null\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"timeParameter\": {\n        \"timeType\": \"\"\n    },\n    \"additionalInfo\": {\n        \"identificationCode\": \"{{identificationCode}}\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "ENTE - Refund rule field empty - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Retrieve Token', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r",
																	"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Status test 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 204\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Message test\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.message).to.oneOf([\"[timeParameter.timeType]: must not be null\",\"[accumulatedAmount.accumulatedType]: must not be null\"]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: \"\"\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"console.log(body);\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "ENTE - Refund rule accumulated amount empty - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Retrieve Token', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r",
																	"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Status test 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule accumulated amount empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status test\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Message test\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.message).to.eql(\"[accumulatedAmount.accumulatedType]: must not be null\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, accumulatedType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"accumulatedAmount\": {\n    \"accumulatedType\": \"\",\n    \"refundThreshold\": \"\"\n  },\n    \"additionalInfo\": {\n        \"identificationCode\": \"{{identificationCode}}\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "DELETE initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/:6409a6252be704322354a1ba/beneficiary/instruments",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":6409a6252be704322354a1ba",
																"beneficiary",
																"instruments"
															],
															"variable": [
																{
																	"key": "6409a6252be704322354a1ba",
																	"value": null
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "PAGOPA - Initiative Update status TO_CHECK",
					"item": [
						{
							"name": "ENTE - Initiative Creation Copy",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Retrieve Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
													"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
													"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"\r",
													"pm.collectionVariables.set('channel_type', 'web');\r",
													"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"// console.log('jsondata', jsonData);\r",
													"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
													"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
													"\r",
													"pm.test(\"Status test 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify response body\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/info",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"info"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info) - DRAFT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', true);\r",
													"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('budget', 20);\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', true);\r",
													"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP3 Update Groups - upload correct file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify response body\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"status\");\r",
													"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
													"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{basePath}}/example_fiscal_code.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlGroup}}/:initiativeId/upload",
											"host": [
												"{{baseUrlGroup}}"
											],
											"path": [
												":initiativeId",
												"upload"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
													"}\r",
													"\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timeParameter\": {\n        \"timeType\": \"{{timeType}}\"\n    },\n    \"additionalInfo\": {\n        \"identificationCode\": \"{{identificationCode}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
													"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"*/\r",
													"\r",
													"\r",
													"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
													"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
													"\r",
													"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
													"let body = {};\r",
													"if (refundTypeSelected == \"timeParameter\") {\r",
													"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"    body = {\r",
													"        timeParameter: {\r",
													"            timeType: timeType[timeTypeRandomIndex]\r",
													"        }\r",
													"    };\r",
													"} else {\r",
													"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
													"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
													"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
													"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
													"            }\r",
													"        };\r",
													"    } else {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"THRESHOLD_REACHED\",\r",
													"                refundThreshold: 10\r",
													"            }\r",
													"        };\r",
													"    }\r",
													"}\r",
													"console.log(body);\r",
													"pm.collectionVariables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "PAGOPA - initiativeId not found - 404",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Retrieve Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"pagopa_admin\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update initiative into TO_CHECK status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test 204\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Message test\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.message).to.eql(\"Initiative with initiativeId :fake_initiativeId not found.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/:{{initiativeId-fake}}/rejected",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":{{initiativeId-fake}}",
												"rejected"
											],
											"variable": [
												{
													"key": "{{initiativeId-fake}}",
													"value": null
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "ENTE - Initiative Update",
					"item": [
						{
							"name": "ENTE - logo too large - 413",
							"item": [
								{
									"name": "ENTE - Initiative Creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"console.log(body);\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status TO_CHECK",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"pagopa_admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into TO_CHECK status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/rejected",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"rejected"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Retrieve Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test 201\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/info",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"info"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative Logo (Service Info) logo too large",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(413);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "logo",
													"type": "file",
													"src": "{{basePath}}/too_large.png"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/logo",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"logo"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PAGOPA - Initiative update status APPROVED",
					"item": [
						{
							"name": "Generate Portal Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Retrieve Token', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
											"});\r",
											"\r",
											"//response time is less than 1s\r",
											"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"pagopa_admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/welfare/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"welfare",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update initiative into APPROVED status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Message test\", function () {\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.message).to.eql(\"Initiative with initiativeId fake_initiativeId not found.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//setTimeout(function(){}, 20000); //milliseconds"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalTokenPagopa}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId-fake}}/approved",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId-fake}}",
										"approved"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "ENTE - Initiative PUBLISHED",
					"item": [
						{
							"name": "PAGOPA - try to update status PUBLISHED - 400",
							"item": [
								{
									"name": "ENTE - Initiative Creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"console.log(body);\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"pagopa_admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"approved"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Portal Token Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Retrieve Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"pagopa_admin\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiative PUBLISHED",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Message test\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.message).to.eql(\"Permission not valid for [pagopa_admin]\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*let body;\r",
													"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
													"if(baseUrlInitiative.includes('localhost')){\r",
													"    body = {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            organizationName: 'Comune di Milano',\r",
													"            organizationFiscalCode: '11122233344',\r",
													"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
													"            organizationUserRole: 'admin'\r",
													"        })\r",
													"    }\r",
													"    pm.request.headers.add({\r",
													"        key: \"Content-Type\",\r",
													"        value: \"application/json\"\r",
													"    });\r",
													"    pm.variables.set('body', JSON.stringify(body));\r",
													"    pm.request.body.update(body);\r",
													"}\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/published",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"published"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - initiativeId fake - 404",
							"item": [
								{
									"name": "Generate Portal Token Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Retrieve Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiative PUBLISHED initiativeId fake",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Message test\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.message).to.eql(\"Initiative with initiativeId fake_initiativeId not found.\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*let body;\r",
													"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
													"if(baseUrlInitiative.includes('localhost')){\r",
													"    body = {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            organizationName: 'Comune di Milano',\r",
													"            organizationFiscalCode: '11122233344',\r",
													"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
													"            organizationUserRole: 'admin'\r",
													"        })\r",
													"    }\r",
													"    pm.request.headers.add({\r",
													"        key: \"Content-Type\",\r",
													"        value: \"application/json\"\r",
													"    });\r",
													"    pm.variables.set('body', JSON.stringify(body));\r",
													"    pm.request.body.update(body);\r",
													"}\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId-fake}}/published",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId-fake}}",
												"published"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - try to update initiative not in status APPROVED - 400",
							"item": [
								{
									"name": "ENTE - Initiative Creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Retrieve Token', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"pm.collectionVariables.set('serviceName', pm.variables.replaceIn('{{$randomProduct}}'));\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r",
															"pm.collectionVariables.set('channel_contact', pm.variables.replaceIn('{{$randomUrl}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Status test 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"{{channel_contact}}\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"console.log(body);\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Retrieve Token', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"b8986bf2-1f93-4827-ab16-b21eb8aeae2b\",\r\n  \"name\": \"Test\",\r\n  \"familyName\": \"IDPay\",\r\n  \"email\": \"test@test.com\",\r\n  \"orgId\": \"2f63a151-da4e-4e1e-acf9-adecc0c4d727\",\r\n  \"orgVAT\": \"00608720272\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"ADMIN\",\r\n  \"orgRole\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiative PUBLISHED",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status test\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Message test\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    const initiativeId = pm.collectionVariables.get(\"initiativeId\");\r",
													"    pm.expect(responseJson.message).to.eql(`Initiative ${initiativeId} unprocessable for status not valid`);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/published",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"published"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "identityPortalToken",
			"value": ""
		},
		{
			"key": "serviceName",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "channel_type",
			"value": ""
		},
		{
			"key": "channel_contact",
			"value": ""
		},
		{
			"key": "initiativeId",
			"value": ""
		},
		{
			"key": "budget",
			"value": ""
		},
		{
			"key": "beneficiaryType",
			"value": ""
		},
		{
			"key": "beneficiaryKnown",
			"value": ""
		},
		{
			"key": "beneficiaryBudget",
			"value": ""
		},
		{
			"key": "rankingStartDate",
			"value": ""
		},
		{
			"key": "rankingEndDate",
			"value": ""
		},
		{
			"key": "startDate",
			"value": ""
		},
		{
			"key": "endDate",
			"value": ""
		},
		{
			"key": "rewardRuleType",
			"value": ""
		},
		{
			"key": "rewardRuleFrom",
			"value": ""
		},
		{
			"key": "rewardRuleTo",
			"value": ""
		},
		{
			"key": "rewardRuleValue",
			"value": ""
		},
		{
			"key": "trxDaysOfWeek",
			"value": ""
		},
		{
			"key": "trxDayEndTime",
			"value": ""
		},
		{
			"key": "trxThresholdFrom",
			"value": ""
		},
		{
			"key": "trxThresholdTo",
			"value": ""
		},
		{
			"key": "trxCountFrom",
			"value": ""
		},
		{
			"key": "trxCountTo",
			"value": ""
		},
		{
			"key": "trxRewardLimitFrequency",
			"value": ""
		},
		{
			"key": "trxRewardLimitValue",
			"value": ""
		},
		{
			"key": "timeType",
			"value": ""
		},
		{
			"key": "identificationCode",
			"value": ""
		},
		{
			"key": "identityPortalTokenPagopa",
			"value": ""
		},
		{
			"key": "accumulatedType",
			"value": ""
		},
		{
			"key": "body",
			"value": ""
		},
		{
			"key": "initiativeId-fake",
			"value": "fake_initiativeId"
		},
		{
			"key": "rewardValueType",
			"value": ""
		},
		{
			"key": "basePath",
			"value": "/C:/Users/ranaldoda/Desktop/Portale_enti_test/Initiative_with_whitelist"
		}
	]
}