{
	"info": {
		"_postman_id": "b0284a62-425d-4858-9076-529a18bcab99",
		"name": "idpay-initiative-e2e with retry",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26036679",
		"_collection_link": "https://idpay-test-funzionali.postman.co/workspace/IDPay-Test-Funzionali~d5f80577-ab5d-4d50-87c4-a81b6bcba6bc/collection/26036679-b0284a62-425d-4858-9076-529a18bcab99?action=share&source=collection_link&creator=26036679"
	},
	"item": [
		{
			"name": "Initiative with whitelist",
			"item": [
				{
					"name": "Happy Case",
					"item": [
						{
							"name": "ENTE - Initiative Creation",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with whitelist - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 15000)",
													"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
													"let moment = require('moment');\r",
													"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
													"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
													"pm.collectionVariables.set('serviceName', serviceName);\r",
													"\r",
													"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"\r",
													"pm.collectionVariables.set('channel_type', 'web');\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"// console.log('jsondata', jsonData);\r",
													"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
													"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
													"\r",
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/info",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"info"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info) - DRAFT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', true);\r",
													"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP2 Draft - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('budget', 20);\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', true);\r",
													"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP3 Update Groups - upload correct file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"status\");\r",
													"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
													"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{basePath}}/example_fiscal_code.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlGroup}}/:initiativeId/upload",
											"host": [
												"{{baseUrlGroup}}"
											],
											"path": [
												":initiativeId",
												"upload"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP4 Draft - (Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 15000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 15000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP5 Draft - (Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timeParameter\": {\n        \"timeType\": \"{{timeType}}\"\n    },\n    \"additionalInfo\": {\n        \"identificationCode\": \"{{identificationCode}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP5 - (Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
													"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"*/\r",
													"\r",
													"\r",
													"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
													"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
													"\r",
													"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
													"let body = {};\r",
													"if (refundTypeSelected == \"timeParameter\") {\r",
													"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"    body = {\r",
													"        timeParameter: {\r",
													"            timeType: timeType[timeTypeRandomIndex]\r",
													"        }\r",
													"    };\r",
													"} else {\r",
													"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
													"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
													"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
													"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
													"            }\r",
													"        };\r",
													"    } else {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"THRESHOLD_REACHED\",\r",
													"                refundThreshold: 10\r",
													"            }\r",
													"        };\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "PAGOPA - Initiative update status TO_CHECK",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with whitelist - Happy case - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update initiative into TO_CHECK status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - PagoPA Admin updates initiative status into TO_CHECK -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/rejected",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"rejected"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative Update",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with whitelist - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP1-Update Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
                                              "exec": [
                                                "let moment = require('moment');\r",
                                                "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                                                "const serviceName = 'Test funzionali App IO Initiative with criteria ' + now;\r",
                                                "pm.collectionVariables.set('serviceName', serviceName);\r",
                                                "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                                "\r",
                                                "pm.collectionVariables.set('channel_type', 'web');\r"
                                              ],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative updating - STEP1 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/info",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"info"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative Logo (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative uploading logo - STEP1 - Responses with 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "logo",
													"type": "file",
													"src": "{{basePath}}/logo_ok.PNG"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/logo",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"logo"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', true);\r",
													"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative updating - STEP2 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP3 Update Groups - upload correct file",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative updating - STEP3 - Responses with 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Initiative with whitelist - Happy case - Initiative updating - STEP3 - Verify response body\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"status\");\r",
													"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
													"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "{{basePath}}/example_fiscal_code.csv"
												}
											]
										},
										"url": {
											"raw": "{{baseUrlGroup}}/:initiativeId/upload",
											"host": [
												"{{baseUrlGroup}}"
											],
											"path": [
												":initiativeId",
												"upload"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative updating - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 15000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative updating - STEP5 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
													"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"*/\r",
													"\r",
													"\r",
													"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
													"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
													"\r",
													"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
													"let body = {};\r",
													"if (refundTypeSelected == \"timeParameter\") {\r",
													"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"    body = {\r",
													"        timeParameter: {\r",
													"            timeType: timeType[timeTypeRandomIndex]\r",
													"        }\r",
													"    };\r",
													"} else {\r",
													"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
													"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
													"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
													"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
													"            }\r",
													"        };\r",
													"    } else {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"THRESHOLD_REACHED\",\r",
													"                refundThreshold: 10\r",
													"            }\r",
													"        };\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PAGOPA - Initiative update status APPROVED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with whitelist - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update initiative into APPROVED status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"approved"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative PUBLISHED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with whitelist - Happy case - Initiative updating - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiative PUBLISHED",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative updating - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 30000)",
													"/*let body;\r",
													"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
													"if(baseUrlInitiative.includes('localhost')){\r",
													"    body = {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            organizationName: 'Comune di Milano',\r",
													"            organizationFiscalCode: '11122233344',\r",
													"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
													"            organizationUserRole: 'admin'\r",
													"        })\r",
													"    }\r",
													"    pm.request.headers.add({\r",
													"        key: \"Content-Type\",\r",
													"        value: \"application/json\"\r",
													"    });\r",
													"    pm.variables.set('body', JSON.stringify(body));\r",
													"    pm.request.body.update(body);\r",
													"}\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"published"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Mil token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.collectionVariables.set('milCitizenToken', jsonData.access_token);\r",
											"\r",
											"pm.test(\"Initiative with whitelist - Happy case - Mil Token - Response status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "RequestId",
										"value": "e3f85673-6e4a-4f1b-a60b-3aa857d3e59a"
									},
									{
										"key": "AcquirerId",
										"value": "06789"
									},
									{
										"key": "Channel",
										"value": "ATM"
									},
									{
										"key": "TerminalId",
										"value": "64874412"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_secret",
											"value": "bea0fc26-fe22-4b26-8230-ef7d4461acf9",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "83c0b10f-b398-4cc8-b356-a3e0f0291679",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "fiscal_code",
											"value": "XXXYYY11Z22W333K",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://mil-u-apim.azure-api.net/mil-auth/token",
									"protocol": "https",
									"host": [
										"mil-u-apim",
										"azure-api",
										"net"
									],
									"path": [
										"mil-auth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Initiatives List MIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Initiative with whitelist - Happy case - Get Initiatives List MIL - response status is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Initiative with whitelist - Happy case - Get Initiatives List MIL  - checking Initiatives list contains initiativeId\", function () {\r",
											"    let responseJson = pm.response.json()\r",
											"    let isInitiative = false;\r",
											"    for (let i = 0; i < responseJson.length; i++) {\r",
											"        if (responseJson[i].initiativeId === pm.collectionVariables.get('initiativeId')) {\r",
											"            isInitiative = true;\r",
											"            break;\r",
											"        }\r",
											"    }\r",
											"    pm.expect(isInitiative).to.be.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"//setTimeout(()=> {}, 20000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{milCitizenToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Ocp-Apim-Subscription-Key",
										"value": "{{milCitizenSubscriptionKey}}",
										"type": "text"
									},
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "text"
									},
									{
										"key": "Accept-Language",
										"value": "it_IT",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/idpay/mil/onboarding/initiatives",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"idpay",
										"mil",
										"onboarding",
										"initiatives"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Initiative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Initiative with whitelist - Happy case - Delete Initiative - Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
									"host": [
										"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
									],
									"path": [
										"idpay",
										"initiative",
										"{{initiativeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "ENTE - Initiative Creation",
							"item": [
								{
									"name": "Step 1 - Insert Initiaitve",
									"item": [
										{
											"name": "PAGOPA try to create initiative - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - PagoPA admin trying to create an initiative - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - PagoPA admin trying to create an initiative - Response message contain info about ko\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql('INITIATIVE_ADMIN_ROLE_NOT_ALLOWED');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative Creation Insert required field empty - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info) - required field empty",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Ente Admin trying to create an initiative without serviceName and serviceScope fields - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Ente Admin trying to create an initiative - Response contains info about required fields\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql('INITIATIVE_INVALID_REQUEST');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"\",\n    \"serviceScope\": \"\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Step 2 - General info",
									"item": [
										{
											"name": "ENTE - required field empty - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info) required field empty",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative without beneficiaryType and rankingStartDate fields - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative - Response contains info about required fields\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql('INITIATIVE_INVALID_REQUEST');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative setting a beneficiaryBudget greater than budget - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - beneficiary budget greater than budget - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info) beneficiary budget greater than budget",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 100);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative setting a beneficiaryBudget greater than budget - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative - Response contains info about beneficiaryBudget greater than budget\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql('INITIATIVE_INVALID_REQUEST');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative without beneficiaryType and rankingStartDate fields - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - ranking end date not future date - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info) ranking end date not future date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', todayP1);\r",
																	"pm.collectionVariables.set('rankingEndDate', today);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative setting a rankingStartDate value greater than rankingEndDate value\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative - Response contains info about wrong dates values\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql('INITIATIVE_INVALID_REQUEST');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Ente Admin trying to create an initiative setting a rankingStartDate value greater than rankingEndDate value - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Step 3 - Upload file",
									"item": [
										{
											"name": "ENTE - Initiative Creation Upload empty file - 200 KO",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload empty file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading an empty file - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading an empty file - Verify response body contains the errorKey group.groups.invalid.file.empty and a KO status\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('KO');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
																	"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.empty');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/empty_file.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Initiattive Creation Upload empty file - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "ENTE - Initiative Creation Upload wrong file - 200 KO",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload wrong file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading a file with a wrong fiscal code - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading an empty file - Verify response body contains the errorKey group.groups.invalid.file.cf.wrong and a KO status\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('KO');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
																	"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.cf.wrong');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/wrong_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Initiative Creation Upload wrong file - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "ENTE - Initiative Creation Upload greater CF than beneficiary budget - 200 KO",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload greater CF than beneficiary budget file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading a file that contais too many fiscal codes - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading a file that contais too many fiscal codes - Verify response body contains the errorKey group.groups.invalid.file.beneficiary.number.budget and a KO status\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('KO');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
																	"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.beneficiary.number.budget');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/greater_than_beneficiary_budget_fiscal_code_.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Initiative Creation Upload greater CF than beneficiary budget - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "ENTE - Initiative Creation Upload invalid file - 200 KO",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload Invalid file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading a file with a wrong extension - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading a file with a wrong extension - Verify response body contains the errorKey group.groups.invalid.file.format and a KO status\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('KO');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
																	"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.format');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/invalid_format.xlsx"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Initiative Creation Upload invalid file - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "ENTE - Initiative Creation Upload large file - 200 KO",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload Invalid file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading a file greater than 2mb - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Ente Admin trying to create an initiative uploading a file greater than 2mb - Verify response body contains the errorKey group.groups.invalid.file.size and a KO status\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('KO');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"    pm.expect(jsonResponse).have.property(\"errorKey\");\r",
																	"    pm.expect(jsonResponse.errorKey).contain('group.groups.invalid.file.size');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/ps_fiscal_code_groups_file_large(+2mb).csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Initiative Creation Upload large file - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									]
								},
								{
									"name": "Step 4 - Reward rules",
									"item": [
										{
											"name": "ENTE - Initiative Reward rules field empty - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules field empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Ente Admin trying to create an initiative with a rewardRule that not contains _type and rewardValue required fields - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Ente Admin trying to create an initiative - Response contains info about required fields\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_INVALID_REQUEST\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 15000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"\",\n        \"rewardValue\": \"\",\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Initiative Reward rules field empty - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative Reward rules end time empty - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules end time empty",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Ente Admin trying to create an initiative with a trxRule that contains a daysOfWeek interval without the endTime required field - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Ente Admin trying to create an initiative - Response contains info about required field\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_INVALID_REQUEST\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": \"{{rewardRuleValue}}\",\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Initiative Reward rules end time empty - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative Reward mcc filter empty array - 400",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules mcc filter empty array",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Ente Admin trying to create an initiative with a trxRule that contains an mccFilter empty list - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Ente Admin trying to create an initiative - Response contains info about required field\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_INVALID_REQUEST\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": \"{{rewardRuleValue}}\",\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": []\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Initiative Reward mcc filter empty array - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative with initiativeRewardType empty",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 15000)",
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Ente Admin trying to create an initiative with empty initiativeRewardType field  - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Ente Admin trying to create an initiative with empty initiativeRewardType field - Response contains info about required field\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql('INITIATIVE_INVALID_REQUEST');\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - Initiative with initiativeRewardType empty - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									]
								},
								{
									"name": "Step 5 - Refund rule",
									"item": [
										{
											"name": "ENTE - Refund rule",
											"item": [
												{
													"name": "ENTE - Refund rule time parameter/accumulated amount empty - 400",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP1-Insert Initiative (Service Info)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																			"\r",
																			"let moment = require('moment');\r",
																			"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																			"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																			"pm.collectionVariables.set('serviceName', serviceName);\r",
																			"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																			"\r",
																			"pm.collectionVariables.set('channel_type', 'web');\r"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"// console.log('jsondata', jsonData);\r",
																			"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																			"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																			"\r",
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																			"    let jsonResponse = pm.response.json();\r",
																			"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/info",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"info"
																	]
																},
																"description": "Save initiative and first subset of data 'general info'"
															},
															"response": []
														},
														{
															"name": "STEP2-Update Initiative (general Info)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"let moment = require('moment');\r",
																			"//Format: YYYY-MM-DD\r",
																			"let today = String(moment().format('YYYY-MM-DD'));\r",
																			"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																			"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																			"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																			"\r",
																			"/*\r",
																			"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																			"pm.collectionVariables.set('...', _.random(0, 180));\r",
																			"*/\r",
																			"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																			"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																			"pm.collectionVariables.set('budget', 20);\r",
																			"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																			"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																			"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																			"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																			"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																			"pm.collectionVariables.set('rankingStartDate', today);\r",
																			"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																			"pm.collectionVariables.set('startDate', todayP2);\r",
																			"pm.collectionVariables.set('endDate', todayP3);"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/general",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"general"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																},
																"description": "Save initiative and first subset of data 'general info'"
															},
															"response": []
														},
														{
															"name": "STEP3 Update Groups - upload correct file",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																			"    pm.response.to.have.status(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
																			"    let jsonResponse = pm.response.json();\r",
																			"    pm.expect(jsonResponse).have.property(\"status\");\r",
																			"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																			"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"type": "file",
																			"src": "{{basePath}}/example_fiscal_code.csv"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrlGroup}}/:initiativeId/upload",
																	"host": [
																		"{{baseUrlGroup}}"
																	],
																	"path": [
																		":initiativeId",
																		"upload"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP4-Update Initiative Trx-Reward rules",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"setTimeout(()=> {}, 10000)\r",
																			"const d = new Date();\r",
																			"dateString = d.toISOString()\r",
																			"let endTime = dateString.split('T');\r",
																			"endTime = endTime[1].split('Z');\r",
																			"\r",
																			"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																			"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																			"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																			"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																			"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																			"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																			"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																			"} else {\r",
																			"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																			"}\r",
																			"\r",
																			"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																			"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																			"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																			"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																			"pm.collectionVariables.set('trxCountFrom', 3);\r",
																			"pm.collectionVariables.set('trxCountTo', 11);\r",
																			"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																			"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"reward"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP5-Update Initiative Refund Rule",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP5 - Ente Admin trying to create an initiative with a randomly generated between the two main cases of refundRule\", function () {\r",
																			"    pm.response.to.have.status(400);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP5 - Ente Admin trying to create an initiative - Response contains info about required field\", function () {\r",
																			"    const responseJson = pm.response.json();\r",
																			"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_INVALID_REQUEST\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																			"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"\r",
																			"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																			"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"\r",
																			"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																			"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																			"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																			"*/\r",
																			"\r",
																			"\r",
																			"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																			"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																			"\r",
																			"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																			"let body = {};\r",
																			"if (refundTypeSelected == \"timeParameter\") {\r",
																			"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																			"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"    body = {\r",
																			"        timeParameter: {\r",
																			"            timeType: \"\"\r",
																			"        }\r",
																			"    };\r",
																			"} else {\r",
																			"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																			"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																			"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																			"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																			"        body = {\r",
																			"            accumulatedAmount: {\r",
																			"                accumulatedType: \"\"\r",
																			"            }\r",
																			"        };\r",
																			"    } else {\r",
																			"        body = {\r",
																			"            accumulatedAmount: {\r",
																			"                accumulatedType: \"\",\r",
																			"                refundThreshold: 10\r",
																			"            }\r",
																			"        };\r",
																			"    }\r",
																			"}\r",
																			"\r",
																			"pm.collectionVariables.set('body', JSON.stringify(body));"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{body}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"refund"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "Delete Initiative",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP5 - Refund rule - Refund rule time parameter/accumulated amount empty - Status test 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "DELETE",
																"header": [],
																"url": {
																	"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
																	"host": [
																		"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
																	],
																	"path": [
																		"idpay",
																		"initiative",
																		"{{initiativeId}}"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													]
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "PAGOPA - Initiative Update status TO_CHECK",
							"item": [
								{
									"name": "ENTE - Initiative Creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with whitelist - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)\r",
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP5 - (Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PAGOPA - initiativeId not found - 404",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with whitelist - Happy case - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 2s\"] = responseTime < 2000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into TO_CHECK status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - PagoPA Admin trying to reject an initiative with an id that not exists - Responses with 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative deletion - PagoPA Admin trying to reject an initiative - Response contains info about a not existing initiativeId\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_NOT_FOUND\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/:{{initiativeId-fake}}/rejected",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":{{initiativeId-fake}}",
														"rejected"
													],
													"variable": [
														{
															"key": "{{initiativeId-fake}}",
															"value": null
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Unhappy case - Initiative Update status TO_CHECK - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative Update",
							"item": [
								{
									"name": "ENTE - logo too large - 413",
									"item": [
										{
											"name": "ENTE - Initiative Creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - STEP5 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status TO_CHECK",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into TO_CHECK status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - PagoPA Admin updates initiative status into TO_CHECK -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/rejected",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"rejected"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
                                                      "exec": [
                                                        "let moment = require('moment');\r",
                                                        "const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
                                                        "const serviceName = 'Test funzionali App IO Initiative with criteria ' + now;\r",
                                                        "pm.collectionVariables.set('serviceName', serviceName);\r",
                                                        "pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
                                                        "\r",
                                                        "pm.collectionVariables.set('channel_type', 'web');\r"
                                                      ],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative updating - STEP1 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative Logo (Service Info) logo too large",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative updating - STEP1 - Ente admin trying to upload a logo greater than 1mb - Responses with 413\", function () {\r",
															"    pm.response.to.have.status(413);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "logo",
															"type": "file",
															"src": "{{basePath}}/logo_too_large.png"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/logo",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"logo"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative update - Logo too large - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "PAGOPA - Initiative update status APPROVED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with whitelist - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update initiative into APPROVED status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - PagoPA Admin trying to approve an initiative with an id that not exists - Responses with 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Initiative with whitelist - Unhappy case - Initiative deletion - PagoPA Admin trying to approve an initiative - Response contains info about a not existing initiativeId\", function () {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_NOT_FOUND\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId-fake}}/approved",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId-fake}}",
												"approved"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative PUBLISHED",
							"item": [
								{
									"name": "PAGOPA - try to update status PUBLISHED - 400",
									"item": [
										{
											"name": "ENTE - Initiative Creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP5 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"approved"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Generate Portal Token Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative updating - PagoPA Admin trying to update initiative status into PUBLISHED -(Responses with 400)\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative updating - PagoPA Admin trying to update initiative status into PUBLISHED - Response contains info about permission denied\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_ADMIN_ROLE_NOT_ALLOWED\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"published"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative PUBLISHED - PAGOPA try to update status PUBLISHED - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - initiativeId fake - 404",
									"item": [
										{
											"name": "Generate Portal Token Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED initiativeId fake",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - PagoPA Admin trying to publish an initiative with an id that not exists - Responses with 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative deletion - PagoPA Admin trying to publish an initiative - Response contains info about a not existing initiativeId\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_NOT_FOUND\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId-fake}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId-fake}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - try to update initiative not in status APPROVED - 400",
									"item": [
										{
											"name": "ENTE - Initiative Creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Uhnappy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - STEP5 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)\", () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative updating - Ente Admin trying to update initiative status into PUBLISHED before an approvation by PagoPA admin -(Responses with 400)\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative updating - PagoPA Admin trying to update initiative status into PUBLISHED - Response contains info about an unprocessable status\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(`INITIATIVE_STATUS_NOT_VALID`);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"published"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with whitelist - Unhappy case - Initiative PUBLISHED - ENTE try to update initiative not in status APPROVED - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Initiative with criteria",
			"item": [
				{
					"name": "Happy Case",
					"item": [
						{
							"name": "ENTE - Initiative creation",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with criteria - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP1-Insert Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
													"const serviceName = 'Test funzionali App IO Initiative with criteria ' + now;\r",
													"pm.collectionVariables.set('serviceName', serviceName);\r",
													"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"\r",
													"pm.collectionVariables.set('channel_type', 'web');\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody);\r",
													"// console.log('jsondata', jsonData);\r",
													"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
													"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
													"\r",
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify response body\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/info",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"info"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info) - DRAFT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', false);\r",
													"pm.collectionVariables.set('rankingEnabled', false);\r",
													"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP2 Draft - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
													"\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', false);\r",
													"pm.collectionVariables.set('rankingEnabled', false);\r",
													"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP3-Update Initiative (criteria) - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP3 - Draft - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"beneficiary",
												"draft"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP3-Update Initiative (criteria)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"LT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"beneficiary"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP4 - Draft - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP5 - Draft - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timeParameter\": {\n        \"timeType\": \"{{timeType}}\"\n    },\n    \"additionalInfo\": {\n        \"identificationCode\": \"{{identificationCode}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
													"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"*/\r",
													"\r",
													"\r",
													"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
													"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
													"\r",
													"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
													"let body = {};\r",
													"if (refundTypeSelected == \"timeParameter\") {\r",
													"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"    body = {\r",
													"        timeParameter: {\r",
													"            timeType: timeType[timeTypeRandomIndex]\r",
													"        }\r",
													"    };\r",
													"} else {\r",
													"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
													"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
													"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
													"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
													"            }\r",
													"        };\r",
													"    } else {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"THRESHOLD_REACHED\",\r",
													"                refundThreshold: 10\r",
													"            }\r",
													"        };\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PAGOPA - Initiative Update status TO_CHECK",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with criteria - Happy case - Initiative creation - Generate Portal Token (PagoPA Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update initiative into TO_CHECK status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with whitelist - Happy case - Initiative creation - PagoPA Admin update Initiative status into TO_CHECK -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/rejected",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"rejected"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative update",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with criteria - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP1-Update Initiative (Service Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
													"const serviceName = 'Test funzionali App IO Initiative with criteria ' + now;\r",
													"pm.collectionVariables.set('serviceName', serviceName);\r",
													"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"\r",
													"pm.collectionVariables.set('channel_type', 'web');\r"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP1 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/info",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"info"
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info) - DRAFT",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', false);\r",
													"pm.collectionVariables.set('rankingEnabled', false);\r",
													"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP2 - Draft - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP2-Update Initiative (general Info)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let moment = require('moment');\r",
													"//Format: YYYY-MM-DD\r",
													"let today = String(moment().format('YYYY-MM-DD'));\r",
													"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
													"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
													"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
													"\r",
													"/*\r",
													"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
													"pm.collectionVariables.set('...', _.random(0, 180));\r",
													"*/\r",
													"//_.floor(_.random(1.0, 100000.0, true),2)\r",
													"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
													"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
													"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
													"pm.collectionVariables.set('beneficiaryKnown', false);\r",
													"pm.collectionVariables.set('rankingEnabled', false);\r",
													"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
													"pm.collectionVariables.set('rankingStartDate', today);\r",
													"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
													"pm.collectionVariables.set('startDate', todayP2);\r",
													"pm.collectionVariables.set('endDate', todayP3);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP2 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/general",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"general"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										},
										"description": "Save initiative and first subset of data 'general info'"
									},
									"response": []
								},
								{
									"name": "STEP3-Update Initiative (criteria) - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP3 - Draft - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        },\r\n        {\r\n            \"authority\": \"AUTH2\",\r\n            \"code\": \"RESIDENCE\",\r\n            \"field\": \"city\",\r\n            \"operator\": \"EQ\",\r\n            \"value\": \"Milano\",\r\n            \"value2\": \"\"\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"beneficiary",
												"draft"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP3-Update Initiative (criteria)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP3 - Responses with 200\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"AGID\",\r\n            \"code\": \"RESIDENCE\",\r\n            \"field\": \"city\",\r\n            \"operator\": \"EQ\",\r\n            \"value\": \"Milano\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": [\r\n        {\r\n            \"_type\": \"multi\",\r\n            \"description\": \"test_funzionale\",\r\n            \"value\": [\r\n                \"primo\",\r\n                \"secondo\"\r\n            ],\r\n            \"code\": \"1\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"beneficiary"
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP4-Update Initiative Trx-Reward rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)\r",
													"const d = new Date();\r",
													"dateString = d.toISOString()\r",
													"let endTime = dateString.split('T');\r",
													"endTime = endTime[1].split('Z');\r",
													"\r",
													"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
													"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
													"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
													"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
													"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
													"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
													"} else {\r",
													"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
													"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
													"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
													"pm.collectionVariables.set('trxThresholdTo', 50);\r",
													"pm.collectionVariables.set('trxCountFrom', 3);\r",
													"pm.collectionVariables.set('trxCountTo', 11);\r",
													"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
													"pm.collectionVariables.set('trxRewardLimitValue', 3);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"reward"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule - DRAFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)\r",
													"const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"timeParameter\": {\n        \"timeType\": \"{{timeType}}\"\n    },\n    \"additionalInfo\": {\n        \"identificationCode\": \"{{identificationCode}}\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund/draft",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund",
												"draft"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "STEP5-Update Initiative Refund Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - STEP4 - Responses with 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(()=> {}, 10000)\r",
													"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
													"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"\r",
													"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
													"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
													"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
													"*/\r",
													"\r",
													"\r",
													"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
													"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
													"\r",
													"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
													"let body = {};\r",
													"if (refundTypeSelected == \"timeParameter\") {\r",
													"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
													"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
													"    body = {\r",
													"        timeParameter: {\r",
													"            timeType: timeType[timeTypeRandomIndex]\r",
													"        }\r",
													"    };\r",
													"} else {\r",
													"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
													"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
													"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
													"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
													"            }\r",
													"        };\r",
													"    } else {\r",
													"        body = {\r",
													"            accumulatedAmount: {\r",
													"                accumulatedType: \"THRESHOLD_REACHED\",\r",
													"                refundThreshold: 10\r",
													"            }\r",
													"        };\r",
													"    }\r",
													"}\r",
													"\r",
													"pm.collectionVariables.set('body', JSON.stringify(body));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												":initiativeId",
												"refund"
											],
											"variable": [
												{
													"key": "initiativeId",
													"value": "{{initiativeId}}",
													"description": "(Required) The initiative ID"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PAGOPA - Initiative update status APPROVED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with criteria - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update initiative into APPROVED status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(function(){}, 20000); //milliseconds"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalTokenPagopa}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"approved"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ENTE - Initiative PUBLISHED",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with criteria - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													"\r",
													"//response time is less than 1s\r",
													"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Initiative PUBLISHED",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Happy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"/*let body;\r",
													"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
													"if(baseUrlInitiative.includes('localhost')){\r",
													"    body = {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            organizationName: 'Comune di Milano',\r",
													"            organizationFiscalCode: '11122233344',\r",
													"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
													"            organizationUserRole: 'admin'\r",
													"        })\r",
													"    }\r",
													"    pm.request.headers.add({\r",
													"        key: \"Content-Type\",\r",
													"        value: \"application/json\"\r",
													"    });\r",
													"    pm.variables.set('body', JSON.stringify(body));\r",
													"    pm.request.body.update(body);\r",
													"}\r",
													"*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"published"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete Initiative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Initiative with criteria - Happy case - Delete Initiative - Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
									"host": [
										"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
									],
									"path": [
										"idpay",
										"initiative",
										"{{initiativeId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Initiative with criteria - onboarding with wrong isee type",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with criteria - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with criteria ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with criteria - Unhappy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with criteria - Unhappy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with criteria - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with criteria - Unhappy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"SOCIOSANITARIO\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"beneficiary"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with criteria - Unhappy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)\r",
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with criteria - Unhappy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with criteria - Unhappy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with criteria - Unhappy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with criteria - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with criteria - Unhappy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Initiative with Criteria - Onboarding - Unhappy case - Onboarding user with manual criteria - Generate token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_2}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{CF_fake_2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with Criteria - Onboarding - Unhappy case - Onboarding user with wrong isee - Accept T&C - Status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - Prerequisites check - Status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Onboarding - Happy case - APP IO - Onboarding user with manual criteria - PDND + Autocertification - Status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": [\r\n         {\r\n     \"_type\": \"boolean\",\r\n      \"code\": \"1\",\r\n      \"accepted\": true\r\n    }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"if (jsonResponse.status !== 'ONBOARDING_KO') {\r",
													"    retryRequest(postman, pm, setTimeout, 5000);\r",
													"} else {\r",
													"\r",
													"    pm.test(\"Initiative with criteria - Onboarding - Unhappy case - APP IO - Onboarding user with wrong isee type - Status Onboarding KO - Status 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Initiative with criteria - Onboarding Unhappy is ONBOARDING_KO\", function () {\r",
													"        pm.expect(jsonResponse.status).to.eql(`ONBOARDING_KO`);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C Copy to check KO details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with Criteria - Onboarding - Unhappy case - Onboarding user with wrong isee - Accept T&C - Status 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Initiative with criteria - Onboarding user with wrong isee - Accept T&C - message is ISEE_TYPE_FAIL\", function () {\r",
													"        let jsonResponse = pm.response.json()\r",
													"        pm.expect(jsonResponse.code).to.eql(`ONBOARDING_UNSATISFIED_REQUIREMENTS`);\r",
													"    });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with criteria - Unhappy case - Initiative with criteria onboarding with wrong isee type - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Initiative with ranking",
			"item": [
				{
					"name": "Happy Case",
					"item": [
						{
							"name": "ASC CIT have status ELIGIBLE_OK,ELIGIBLE_KO,ONBOARDING_KO",
							"item": [
								{
									"name": "Initiative creation",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with ranking ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', 300);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', true);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 100);\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.collectionVariables.set('ruleIsee', 70000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"LT\",\r\n            \"value\": \"{{ruleIsee}}\",\r\n            \"value2\": \"\",\r\n            \"orderDirection\": \"ASC\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative updating - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Onboarding",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 2",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_1}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 3",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_2}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 4",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_3}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 5",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_4}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 6",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_5}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_5}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 7",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_6}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_6}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 8",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_7}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_7}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 9",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_8}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_8}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 10",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_9}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_9}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 11",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_10}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_10}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 12",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_11}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_11}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 13",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_12}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_12}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 14",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_13}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_13}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 15",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_14}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_14}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 16",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_15}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_15}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing end date",
									"item": [
										{
											"name": "Forcing end date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"pm.collectionVariables.set('yesterday', yesterday);\r",
															"//setTimeout(() => {},10000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Forcing end date - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{yesterday}}",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														":initiativeId",
														"reset-status-set-ranking-end-date"
													],
													"query": [
														{
															"key": "rankingEndDate",
															"value": "{{yesterday}}"
														}
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking creation",
									"item": [
										{
											"name": "Forcing ranking creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"const foundInitiative = jsonResponse.some((item) => {\r",
															"    return item.initiativeId === pm.collectionVariables.get(\"initiativeId\")\r",
															"});\r",
															"\r",
															"    pm.test(\"Initiative with ranking - Happy case - Forcing ranking creation - return status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    pm.test(\"Initiative with ranking - Happy case - Forcing ranking creation - check initiativeId\", function () {\r",
															"        pm.expect(foundInitiative).equals(true);\r",
															"    });"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/ranking/build/file/start",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"ranking",
														"build",
														"file",
														"start"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking pubblication",
									"item": [
										{
											"name": "Forcing ranking pubblication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Forcing ranking pubblication - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/notified",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"notified"
													]
												}
											},
											"response": []
										},
										{
											"name": "Detail ranking view - order and status check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"let eq_ELIGIBLE_OK = true;\r",
															"let eq_ELIGIBLE_KO = true;\r",
															"let eq_ONBOARDING_KO = true;\r",
															"let N_ELIGIBLE_OK = 0;\r",
															"let N_ELIGIBLE_KO = 0;\r",
															"let N_ONBOARDING_KO = 0;\r",
															"let counter = 0;\r",
															"\r",
															"const onboardingMax = pm.collectionVariables.get('budget') / pm.collectionVariables.get('beneficiaryBudget');\r",
															"const ruleIseeCents = pm.collectionVariables.get('ruleIsee') * 100;\r",
															"\r",
															"\r",
															"for (let i = 0; i < jsonResponse.content.length; i++) {\r",
															"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_OK\") {\r",
															"        N_ELIGIBLE_OK++;\r",
															"    }\r",
															"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_KO\") {\r",
															"        N_ELIGIBLE_KO++;\r",
															"    }\r",
															"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ONBOARDING_KO\") {\r",
															"        N_ONBOARDING_KO++;\r",
															"    }\r",
															"    if (jsonResponse.content[i].rankingValue < ruleIseeCents && counter < 3) {\r",
															"        eq_ELIGIBLE_OK = eq_ELIGIBLE_OK && jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_OK\";\r",
															"        counter++;\r",
															"    }\r",
															"\r",
															"    else if (jsonResponse.content[i].rankingValue >= ruleIseeCents) {\r",
															"        eq_ONBOARDING_KO = eq_ONBOARDING_KO && jsonResponse.content[i].beneficiaryRankingStatus === \"ONBOARDING_KO\";\r",
															"    }\r",
															"\r",
															"    else if (jsonResponse.content[i].rankingValue < ruleIseeCents && counter === 3) {\r",
															"        eq_ELIGIBLE_KO = eq_ELIGIBLE_KO && jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_KO\";\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ranking order is ascendent\", function () {\r",
															"    let eq = true;\r",
															"    const responseFiltered = jsonResponse.content.filter((el) => {\r",
															"        if (el.beneficiaryRankingStatus !== 'ONBOARDING_KO') {\r",
															"            return el;\r",
															"        }\r",
															"    });\r",
															"\r",
															"    for (let i = 0; i < responseFiltered.length - 1; i++) {\r",
															"        eq = eq && responseFiltered[i].rankingValue <= responseFiltered[i + 1].rankingValue;\r",
															"    }\r",
															"    pm.expect(eq).to.be.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - The sum of the status (N_ELIGIBLE_OK, N_ELIGIBLE_KO and N_ONBOARDING_KO) is equal to the number of total elements\", function () {\r",
															"    const total = N_ELIGIBLE_OK + N_ELIGIBLE_KO + N_ONBOARDING_KO;\r",
															"    pm.expect(total).to.be.eql(jsonResponse.totalElements);\r",
															"    pm.expect(total).to.be.eql(jsonResponse.content.length);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - The sum of the single status is equal to counters given in the response\", function () {\r",
															"    pm.expect(jsonResponse.totalEligibleOk).to.be.eql(N_ELIGIBLE_OK);\r",
															"    pm.expect(jsonResponse.totalEligibleKo).to.be.eql(N_ELIGIBLE_KO);\r",
															"    pm.expect(jsonResponse.totalOnboardingKo).to.be.eql(N_ONBOARDING_KO);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ELIGIBLE_OK status corresponds to: beneficiary ISEE value is less than the ISEE initiative rule and the budget is not terminated\", function () {\r",
															"    pm.expect(eq_ELIGIBLE_OK).to.be.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ONBOARDING_KO status corresponds to: beneficiary ISEE value is greater than or equal to the ISEE initiative rule\", function () {\r",
															"    pm.expect(eq_ONBOARDING_KO).to.be.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ELIGIBLE_KO status corresponds to: beneficiary ISEE value is less than the ISEE initiative rule and the budget is terminated\", function () {\r",
															"    pm.expect(eq_ELIGIBLE_KO).to.be.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports?size=16",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"exports"
													],
													"query": [
														{
															"key": "size",
															"value": "16"
														},
														{
															"key": "state",
															"value": "ELIGIBLE_OK",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Detail ranking view - pagination",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - pagination - check if the sum of the status is equal to totalElements\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    const sum = jsonResponse.totalEligibleOk + jsonResponse.totalEligibleKo + jsonResponse.totalOnboardingKo;\r",
															"    pm.expect(jsonResponse.totalElements).to.be.eql(sum);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - pagination - check totalPages number\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    const expectedPages = Math.ceil(jsonResponse.totalElements/jsonResponse.pageSize);\r",
															"    pm.expect(jsonResponse.totalPages).to.be.eql(expectedPages);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"exports"
													],
													"query": [
														{
															"key": "beneficiary",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Resetting end date to initial value",
									"item": [
										{
											"name": "Forcing end date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Resetting end date to initial value - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{rankingEndDate}}",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														":initiativeId",
														"reset-status-set-ranking-end-date"
													],
													"query": [
														{
															"key": "rankingEndDate",
															"value": "{{rankingEndDate}}"
														}
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with ranking - Happy case - ASC CIT have status ELIGIBLE_OK,ELIGIBLE_KO,ONBOARDING_KO - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "DESC CIT have status ELIGIBLE_OK,ELIGIBLE_KO,ONBOARDING_KO",
							"item": [
								{
									"name": "Initiative creation",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with ranking ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', 300);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', true);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 100);\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.collectionVariables.set('ruleIsee', 70000);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"LT\",\r\n            \"value\": \"{{ruleIsee}}\",\r\n            \"value2\": \"\",\r\n            \"orderDirection\": \"DESC\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative updating - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Onboarding",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 30000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 2",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_1}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 3",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_2}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_2}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 4",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_3}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_3}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 5",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_4}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_4}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 6",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_5}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_5}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 7",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_6}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_6}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 8",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_7}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_7}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 9",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_8}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_8}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 10",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_9}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_9}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 11",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_10}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_10}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 12",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_11}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_11}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 13",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_12}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_12}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 14",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_13}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_13}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 15",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_14}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_14}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 16",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_15}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_15}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing end date",
									"item": [
										{
											"name": "Forcing end date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"pm.collectionVariables.set('yesterday', yesterday);\r",
															"\r",
															"//setTimeout(() => {}, 8000);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Forcing end date - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{yesterday}}",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														":initiativeId",
														"reset-status-set-ranking-end-date"
													],
													"query": [
														{
															"key": "rankingEndDate",
															"value": "{{yesterday}}"
														}
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking creation",
									"item": [
										{
											"name": "Forcing ranking creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Forcing ranking creation - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - Forcing ranking creation - check initiativeId\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundInitiative = jsonResponse.some((item) =>{\r",
															"         return item.initiativeId === pm.collectionVariables.get(\"initiativeId\")\r",
															"     });\r",
															"    pm.expect(foundInitiative).equals(true); \r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/ranking/build/file/start",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"ranking",
														"build",
														"file",
														"start"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking pubblication",
									"item": [
										{
											"name": "Forcing ranking pubblication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Forcing ranking pubblication - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/notified",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"notified"
													]
												}
											},
											"response": []
										},
										{
											"name": "Detail ranking view ELIGIBLE_OK",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json();\r",
															"let eq_ELIGIBLE_OK = true;\r",
															"let eq_ELIGIBLE_KO = true;\r",
															"let eq_ONBOARDING_KO = true;\r",
															"let N_ELIGIBLE_OK = 0;\r",
															"let N_ELIGIBLE_KO = 0;\r",
															"let N_ONBOARDING_KO = 0;\r",
															"let counter = 0;\r",
															"\r",
															"const onboardingMax = pm.collectionVariables.get('budget') / pm.collectionVariables.get('beneficiaryBudget');\r",
															"const ruleIseeCents = pm.collectionVariables.get('ruleIsee') * 100;\r",
															"\r",
															"\r",
															"for (let i = 0; i < jsonResponse.content.length; i++) {\r",
															"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_OK\") {\r",
															"        N_ELIGIBLE_OK++;\r",
															"    }\r",
															"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_KO\") {\r",
															"        N_ELIGIBLE_KO++;\r",
															"    }\r",
															"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ONBOARDING_KO\") {\r",
															"        N_ONBOARDING_KO++;\r",
															"    }\r",
															"    if (jsonResponse.content[i].rankingValue < ruleIseeCents && counter < 3) {\r",
															"        eq_ELIGIBLE_OK = eq_ELIGIBLE_OK && jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_OK\";\r",
															"        counter++;\r",
															"    }\r",
															"\r",
															"    else if (jsonResponse.content[i].rankingValue >= ruleIseeCents) {\r",
															"        eq_ONBOARDING_KO = eq_ONBOARDING_KO && jsonResponse.content[i].beneficiaryRankingStatus === \"ONBOARDING_KO\";\r",
															"    }\r",
															"\r",
															"    else if (jsonResponse.content[i].rankingValue < ruleIseeCents && counter === 3) {\r",
															"        eq_ELIGIBLE_KO = eq_ELIGIBLE_KO && jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_KO\";\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ranking order is descendent\", function () {\r",
															"    let eq = true;\r",
															"    const responseFiltered = jsonResponse.content.filter((el) => {\r",
															"        if (el.beneficiaryRankingStatus !== 'ONBOARDING_KO') {\r",
															"            return el;\r",
															"        }\r",
															"    });\r",
															"\r",
															"    for (let i = 0; i < responseFiltered.length - 1; i++) {\r",
															"        eq = eq && responseFiltered[i].rankingValue >= responseFiltered[i + 1].rankingValue;\r",
															"    }\r",
															"    pm.expect(eq).to.be.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - The sum of the status (N_ELIGIBLE_OK, N_ELIGIBLE_KO and N_ONBOARDING_KO) is equal to the number of total elements\", function () {\r",
															"    const total = N_ELIGIBLE_OK + N_ELIGIBLE_KO + N_ONBOARDING_KO;\r",
															"    pm.expect(total).to.be.eql(jsonResponse.totalElements);\r",
															"    pm.expect(total).to.be.eql(jsonResponse.content.length);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - The sum of the single status is equal to counters given in the response\", function () {\r",
															"    pm.expect(jsonResponse.totalEligibleOk).to.be.eql(N_ELIGIBLE_OK);\r",
															"    pm.expect(jsonResponse.totalEligibleKo).to.be.eql(N_ELIGIBLE_KO);\r",
															"    pm.expect(jsonResponse.totalOnboardingKo).to.be.eql(N_ONBOARDING_KO);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ELIGIBLE_OK status corresponds to: beneficiary ISEE value is less than the ISEE initiative rule and the budget is not terminated\", function () {\r",
															"    pm.expect(eq_ELIGIBLE_OK).to.be.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ONBOARDING_KO status corresponds to: beneficiary ISEE value is greater than or equal to the ISEE initiative rule\", function () {\r",
															"    pm.expect(eq_ONBOARDING_KO).to.be.eql(true);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ELIGIBLE_KO status corresponds to: beneficiary ISEE value is less than the ISEE initiative rule and the budget is terminated\", function () {\r",
															"    pm.expect(eq_ELIGIBLE_KO).to.be.eql(true);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports?size=16",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"exports"
													],
													"query": [
														{
															"key": "size",
															"value": "16"
														},
														{
															"key": "state",
															"value": "ELIGIBLE_OK",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Resetting end date to initial value",
									"item": [
										{
											"name": "Forcing end date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Resetting end date to initial value - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{rankingEndDate}}",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														":initiativeId",
														"reset-status-set-ranking-end-date"
													],
													"query": [
														{
															"key": "rankingEndDate",
															"value": "{{rankingEndDate}}"
														}
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with ranking - Happy case - DESC CIT have status ELIGIBLE_OK,ELIGIBLE_KO,ONBOARDING_KO - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Initiative Id fake - 404 - Not Found",
							"item": [
								{
									"name": "Forcing end date",
									"item": [
										{
											"name": "Forcing end date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"pm.collectionVariables.set('yesterday', yesterday);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unhappy case - initiative Id fake - Forcing end date - return status 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/initiative/{{initiativeId-fake}}/reset-status-set-ranking-end-date?rankingEndDate={{yesterday}}",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId-fake}}",
														"reset-status-set-ranking-end-date"
													],
													"query": [
														{
															"key": "rankingEndDate",
															"value": "{{yesterday}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking pubblication",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with ranking - Unhappy case - Initiative Id fake - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Forcing ranking pubblication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unhappy case - initiative Id fake - Forcing ranking pubblication - return status 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId-fake}}/ranking/notified",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId-fake}}",
														"ranking",
														"notified"
													]
												}
											},
											"response": []
										},
										{
											"name": "Detail ranking view",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unhappy case - initiative Id fake - Forcing ranking pubblication - Detail ranking view - return status 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with ranking - Unhappy case - initiative Id fake - Forcing ranking pubblication - Detail ranking view - Response is: Initiative with initiativeId fake_initiativeId not found.\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.code).equals('INITIATIVE_NOT_FOUND');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId-fake}}/ranking/exports?state=TEST",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId-fake}}",
														"ranking",
														"exports"
													],
													"query": [
														{
															"key": "beneficiary",
															"value": "",
															"disabled": true
														},
														{
															"key": "state",
															"value": "TEST"
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "NO ISEE - 400",
							"item": [
								{
									"name": "Initiative creation",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Unhappy case - NO ISEE - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with ranking ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - NO ISEE - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - NO ISEE - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', true);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - NO ISEE - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - NO ISEE - Initiative creation - STEP3 - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - NO ISEE - Initiative creation - STEP3 - Response message is Automated criteria not valid. ISEE is Missing. Please check it when Ranking is enabled\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql(`INITIATIVE_AUTOMATED_CRITERIA_NOT_VALID_ISEE_MISSING`)\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"BIRTHDAY\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"orderDirection\": \"ASC\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - NO ISEE - Initiative Creation - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "NO Ranking Order Direction Rule - 400",
							"item": [
								{
									"name": "Initiative creation",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Unhappy case - NO Ranking Order Direction Rule - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with ranking ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - NO Ranking Order Direction Rule - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - NO Ranking Order Direction Rule - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', true);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - NO Ranking Order Direction Rule - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - NO Ranking Order Direction Rule - Initiative creation - STEP3 - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - NO Ranking Order Direction Rule - Initiative creation - STEP3 - Response message is Automated criteria not valid. OrderDirection is Missing. Please check it when Ranking is enabled\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql(`INITIATIVE_AUTOMATED_CRITERIA_NOT_VALID_ORDER_DIRECTION_MISSING`)\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - NO Ranking Order Direction Rule - Initiative Creation - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Field empty - automated criteria code - 400",
							"item": [
								{
									"name": "Initiative creation",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Unhappy case - Field empty automated criteria code - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with ranking ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - Field empty automated criteria code - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - Field empty automated criteria code - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', true);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - Field empty automated criteria code - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - Field empty automated criteria code - Initiative creation - STEP3 - Responses with 400\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - Field empty automated criteria code - Initiative creation - STEP3 - Response message is Automated criteria not valid. OrderDirection is Missing. Please check it when Ranking is enabled\", function () {\r",
																	"    const responseJson = pm.response.json();\r",
																	"    pm.expect(responseJson.code).to.eql(`INITIATIVE_INVALID_REQUEST`)\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "Delete Initiative",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - Field empty automated criteria code - Initiative Creation - Delete Initiative - Status test 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
															"host": [
																"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Initiative Ranking Enabled false - 404",
							"item": [
								{
									"name": "Initiative creation",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with ranking ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', false);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"orderDirection\": \"ASC\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative creation - STEP5 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking -  Unhappy case - initiative rankingEnabled false - Initiative updating - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking -  Unhappy case - initiative rankingEnabled false - Initiative updating - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Forcing end date",
									"item": [
										{
											"name": "Forcing end date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"pm.collectionVariables.set('yesterday', yesterday);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Forcing end date - return status 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{yesterday}}",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														":initiativeId",
														"reset-status-set-ranking-end-date"
													],
													"query": [
														{
															"key": "rankingEndDate",
															"value": "{{yesterday}}"
														}
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking creation",
									"item": [
										{
											"name": "Forcing ranking creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unappy case - initiative rankingEnabled false - Forcing ranking creation - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Forcing ranking creation - check initiativeId not present\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundInitiative = jsonResponse.some((item) =>{\r",
															"         return item.initiativeId === pm.collectionVariables.get(\"initiativeId\")\r",
															"     });\r",
															"    pm.expect(foundInitiative).equals(false); \r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/ranking/build/file/start",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"ranking",
														"build",
														"file",
														"start"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking pubblication",
									"item": [
										{
											"name": "Forcing ranking pubblication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Forcing ranking pubblication - return status 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/notified",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"notified"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with ranking - Unhappy case - initiative rankingEnabled false - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Beneficiary filter field empty - 400(500)",
							"item": [
								{
									"name": "Initiative creation",
									"item": [
										{
											"name": "ENTE - Initiative creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Initiative with ranking ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																	"pm.collectionVariables.set('rankingEnabled', true);\r",
																	"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3-Update Initiative (criteria)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"orderDirection\": \"ASC\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"beneficiary"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with ranking - Happy case - Initiative updating - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 30000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Onboarding",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"setTimeout(()=>{ \r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - Onboarding - Status Onboarding - status ON_EVALUATION\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).equals('ON_EVALUATION');\r",
															"});\r",
															" },2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing end date",
									"item": [
										{
											"name": "Forcing end date",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"pm.collectionVariables.set('yesterday', yesterday);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Forcing end date - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{yesterday}}",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														":initiativeId",
														"reset-status-set-ranking-end-date"
													],
													"query": [
														{
															"key": "rankingEndDate",
															"value": "{{yesterday}}"
														}
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking creation",
									"item": [
										{
											"name": "Forcing ranking creation",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Happy case - Forcing ranking creation - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Initiative with ranking - Happy case - Forcing ranking creation - check initiativeId\", function () {\r",
															"     let jsonResponse = pm.response.json()\r",
															"     const foundInitiative = jsonResponse.some((item) =>{\r",
															"         return item.initiativeId === pm.collectionVariables.get(\"initiativeId\")\r",
															"     });\r",
															"    pm.expect(foundInitiative).equals(true); \r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(() => { }, 20000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrl}}/idpay/ranking/build/file/start",
													"host": [
														"{{AKSAPIServerUrl}}"
													],
													"path": [
														"idpay",
														"ranking",
														"build",
														"file",
														"start"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Forcing ranking pubblication",
									"item": [
										{
											"name": "Forcing ranking pubblication",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unhappy case - Forcing ranking pubblication - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/notified",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"notified"
													]
												}
											},
											"response": []
										},
										{
											"name": "Detail ranking view",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unhappy case - Beneficiary filter field empty - Forcing ranking pubblication - Response is: Fiscal code must not be blank\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.code).equals('INITIATIVE_GENERIC_ERROR');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports?beneficiary=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"exports"
													],
													"query": [
														{
															"key": "beneficiary",
															"value": ""
														},
														{
															"key": "state",
															"value": "",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "State filter does not exist - 400(500)",
							"item": [
								{
									"name": "Forcing ranking pubblication",
									"item": [
										{
											"name": "Detail ranking view",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with ranking - Unhappy case - State filter does not exist - Forcing ranking pubblication - Response is: State filter does not exist\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.code).eql('INITIATIVE_GENERIC_ERROR');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 10000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports?state=TEST",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}",
														"ranking",
														"exports"
													],
													"query": [
														{
															"key": "beneficiary",
															"value": "",
															"disabled": true
														},
														{
															"key": "state",
															"value": "TEST"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with ranking - Unhappy case - State filter does not exist - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Initiative with discount",
			"item": [
				{
					"name": "Happy Case",
					"item": [
						{
							"name": "Initiative with ranking",
							"item": [
								{
									"name": "ASC CIT have status ELIGIBLE_OK,ELIGIBLE_KO,ONBOARDING_KO",
									"item": [
										{
											"name": "Initiative creation",
											"item": [
												{
													"name": "ENTE - Initiative creation",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Initiative discount - Initiative with ranking - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP1-Insert Initiative (Service Info)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																			"\r",
																			"let moment = require('moment');\r",
																			"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																			"const serviceName = 'Test funzionali App IO Initiative with ranking and discount ' + now;\r",
																			"pm.collectionVariables.set('serviceName', serviceName);\r",
																			"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																			"\r",
																			"pm.collectionVariables.set('channel_type', 'web');\r"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"// console.log('jsondata', jsonData);\r",
																			"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																			"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																			"\r",
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																			"    let jsonResponse = pm.response.json();\r",
																			"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/info",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"info"
																	]
																},
																"description": "Save initiative and first subset of data 'general info'"
															},
															"response": []
														},
														{
															"name": "STEP2-Update Initiative (general Info)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"let moment = require('moment');\r",
																			"//Format: YYYY-MM-DD\r",
																			"let today = String(moment().format('YYYY-MM-DD'));\r",
																			"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																			"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																			"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																			"\r",
																			"/*\r",
																			"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																			"pm.collectionVariables.set('...', _.random(0, 180));\r",
																			"*/\r",
																			"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																			"pm.collectionVariables.set('budget', 300);\r",
																			"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																			"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																			"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																			"pm.collectionVariables.set('rankingEnabled', true);\r",
																			"pm.collectionVariables.set('beneficiaryBudget', 100);\r",
																			"pm.collectionVariables.set('rankingStartDate', today);\r",
																			"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																			"pm.collectionVariables.set('startDate', todayP2);\r",
																			"pm.collectionVariables.set('endDate', todayP3);"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking  - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/general",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"general"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																},
																"description": "Save initiative and first subset of data 'general info'"
															},
															"response": []
														},
														{
															"name": "STEP3-Update Initiative (criteria)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking  - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"pm.collectionVariables.set('ruleIsee', 70000);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"LT\",\r\n            \"value\": \"{{ruleIsee}}\",\r\n            \"value2\": \"\",\r\n            \"orderDirection\": \"ASC\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId}}",
																		"beneficiary"
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP4-Update Initiative Trx-Reward rules",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"setTimeout(()=> {}, 10000)\r",
																			"const d = new Date();\r",
																			"dateString = d.toISOString()\r",
																			"let endTime = dateString.split('T');\r",
																			"endTime = endTime[1].split('Z');\r",
																			"\r",
																			"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																			"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																			"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																			"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																			"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																			"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																			"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																			"} else {\r",
																			"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																			"}\r",
																			"\r",
																			"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																			"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																			"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																			"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																			"pm.collectionVariables.set('trxCountFrom', 3);\r",
																			"pm.collectionVariables.set('trxCountTo', 11);\r",
																			"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																			"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"initiativeRewardType\": \"DISCOUNT\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"reward"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP5-Update Initiative Refund Rule",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking  - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																			"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"\r",
																			"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																			"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"\r",
																			"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																			"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																			"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																			"*/\r",
																			"\r",
																			"/*\r",
																			"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																			"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																			"\r",
																			"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																			"let body = {};\r",
																			"if (refundTypeSelected == \"timeParameter\") {\r",
																			"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																			"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"    body = {\r",
																			"        timeParameter: {\r",
																			"            timeType: timeType[timeTypeRandomIndex]\r",
																			"        }\r",
																			"    };\r",
																			"} else {\r",
																			"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																			"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																			"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																			"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																			"        body = {\r",
																			"            accumulatedAmount: {\r",
																			"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																			"            }\r",
																			"        };\r",
																			"    } else {\r",
																			"        body = {\r",
																			"            accumulatedAmount: {\r",
																			"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																			"                refundThreshold: 10\r",
																			"            }\r",
																			"        };\r",
																			"    }\r",
																			"}\r",
																			"*/\r",
																			"const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
																			"timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
																			"const body = {\r",
																			"    timeParameter: {\r",
																			"        timeType: timeType[timeTypeRandomIndex]\r",
																			"    }\r",
																			"};\r",
																			"pm.collectionVariables.set('body', JSON.stringify(body));"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{body}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"refund"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "PAGOPA - Initiative update status APPROVED",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Initiative with discount - Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																			"});\r",
																			"\r",
																			"//response time is less than 1s\r",
																			"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update initiative into APPROVED status",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//setTimeout(function(){}, 20000); //milliseconds"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalTokenPagopa}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId}}",
																		"approved"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "ENTE - Initiative PUBLISHED",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Initiative with discount - Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (Ente Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																			"});\r",
																			"\r",
																			"//response time is less than 1s\r",
																			"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Initiative PUBLISHED",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative updating - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/*let body;\r",
																			"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																			"if(baseUrlInitiative.includes('localhost')){\r",
																			"    body = {\r",
																			"        mode: 'raw',\r",
																			"        raw: JSON.stringify({\r",
																			"            organizationName: 'Comune di Milano',\r",
																			"            organizationFiscalCode: '11122233344',\r",
																			"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																			"            organizationUserRole: 'admin'\r",
																			"        })\r",
																			"    }\r",
																			"    pm.request.headers.add({\r",
																			"        key: \"Content-Type\",\r",
																			"        value: \"application/json\"\r",
																			"    });\r",
																			"    pm.variables.set('body', JSON.stringify(body));\r",
																			"    pm.request.body.update(body);\r",
																			"}\r",
																			"*/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId}}",
																		"published"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Onboarding",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 30000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{fiscalCode_fakeWhitelist}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 2",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_1}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 3",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_2}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_2}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 4",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_3}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_3}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 5",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_4}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_4}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 6",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_5}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_5}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 7",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_6}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_6}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 8",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_7}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_7}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 9",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_8}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_8}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 10",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_9}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_9}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 11",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_10}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_10}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 12",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_11}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_11}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 13",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_12}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_12}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 14",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_13}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_13}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 15",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_14}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_14}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 16",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_15}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_15}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Forcing end date",
											"item": [
												{
													"name": "Forcing end date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
																	"pm.collectionVariables.set('yesterday', yesterday);\r",
																	"\r",
																	"//setTimeout(() => {}, 8000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Forcing end date - return status 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{yesterday}}",
															"host": [
																"{{AKSAPIServerUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																":initiativeId",
																"reset-status-set-ranking-end-date"
															],
															"query": [
																{
																	"key": "rankingEndDate",
																	"value": "{{yesterday}}"
																}
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Forcing ranking creation",
											"item": [
												{
													"name": "Forcing ranking creation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Forcing ranking creation - return status 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Forcing ranking creation - check initiativeId\", function () {\r",
																	"     let jsonResponse = pm.response.json()\r",
																	"     const foundInitiative = jsonResponse.some((item) =>{\r",
																	"         return item.initiativeId === pm.collectionVariables.get(\"initiativeId\")\r",
																	"     });\r",
																	"    pm.expect(foundInitiative).equals(true); \r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrl}}/idpay/ranking/build/file/start",
															"host": [
																"{{AKSAPIServerUrl}}"
															],
															"path": [
																"idpay",
																"ranking",
																"build",
																"file",
																"start"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Forcing ranking pubblication",
											"item": [
												{
													"name": "Forcing ranking pubblication",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Forcing ranking pubblication - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 15000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/notified",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}",
																"ranking",
																"notified"
															]
														}
													},
													"response": []
												},
												{
													"name": "Detail ranking view - order and status check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"let eq_ELIGIBLE_OK = true;\r",
																	"let eq_ELIGIBLE_KO = true;\r",
																	"let eq_ONBOARDING_KO = true;\r",
																	"let N_ELIGIBLE_OK = 0;\r",
																	"let N_ELIGIBLE_KO = 0;\r",
																	"let N_ONBOARDING_KO = 0;\r",
																	"let counter = 0;\r",
																	"\r",
																	"const onboardingMax = pm.collectionVariables.get('budget') / pm.collectionVariables.get('beneficiaryBudget');\r",
																	"const ruleIseeCents = pm.collectionVariables.get('ruleIsee') * 100;\r",
																	"\r",
																	"\r",
																	"for (let i = 0; i < jsonResponse.content.length; i++) {\r",
																	"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_OK\") {\r",
																	"        N_ELIGIBLE_OK++;\r",
																	"    }\r",
																	"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_KO\") {\r",
																	"        N_ELIGIBLE_KO++;\r",
																	"    }\r",
																	"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ONBOARDING_KO\") {\r",
																	"        N_ONBOARDING_KO++;\r",
																	"    }\r",
																	"    if (jsonResponse.content[i].rankingValue < ruleIseeCents && counter < 3) {\r",
																	"        eq_ELIGIBLE_OK = eq_ELIGIBLE_OK && jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_OK\";\r",
																	"        counter++;\r",
																	"    }\r",
																	"\r",
																	"    else if (jsonResponse.content[i].rankingValue >= ruleIseeCents) {\r",
																	"        eq_ONBOARDING_KO = eq_ONBOARDING_KO && jsonResponse.content[i].beneficiaryRankingStatus === \"ONBOARDING_KO\";\r",
																	"    }\r",
																	"\r",
																	"    else if (jsonResponse.content[i].rankingValue < ruleIseeCents && counter === 3) {\r",
																	"        eq_ELIGIBLE_KO = eq_ELIGIBLE_KO && jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_KO\";\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ranking order is ascendent\", function () {\r",
																	"    let eq = true;\r",
																	"    const responseFiltered = jsonResponse.content.filter((el) => {\r",
																	"        if (el.beneficiaryRankingStatus !== 'ONBOARDING_KO') {\r",
																	"            return el;\r",
																	"        }\r",
																	"    });\r",
																	"\r",
																	"    for (let i = 0; i < responseFiltered.length - 1; i++) {\r",
																	"        eq = eq && responseFiltered[i].rankingValue <= responseFiltered[i + 1].rankingValue;\r",
																	"    }\r",
																	"    pm.expect(eq).to.be.eql(true);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - The sum of the status (N_ELIGIBLE_OK, N_ELIGIBLE_KO and N_ONBOARDING_KO) is equal to the number of total elements\", function () {\r",
																	"    const total = N_ELIGIBLE_OK + N_ELIGIBLE_KO + N_ONBOARDING_KO;\r",
																	"    pm.expect(total).to.be.eql(jsonResponse.totalElements);\r",
																	"    pm.expect(total).to.be.eql(jsonResponse.content.length);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - The sum of the single status is equal to counters given in the response\", function () {\r",
																	"    pm.expect(jsonResponse.totalEligibleOk).to.be.eql(N_ELIGIBLE_OK);\r",
																	"    pm.expect(jsonResponse.totalEligibleKo).to.be.eql(N_ELIGIBLE_KO);\r",
																	"    pm.expect(jsonResponse.totalOnboardingKo).to.be.eql(N_ONBOARDING_KO);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ELIGIBLE_OK status corresponds to: beneficiary ISEE value is less than the ISEE initiative rule and the budget is not terminated\", function () {\r",
																	"    pm.expect(eq_ELIGIBLE_OK).to.be.eql(true);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ONBOARDING_KO status corresponds to: beneficiary ISEE value is greater than or equal to the ISEE initiative rule\", function () {\r",
																	"    pm.expect(eq_ONBOARDING_KO).to.be.eql(true);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ELIGIBLE_KO status corresponds to: beneficiary ISEE value is less than the ISEE initiative rule and the budget is terminated\", function () {\r",
																	"    pm.expect(eq_ELIGIBLE_KO).to.be.eql(true);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 10000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports?size=16",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}",
																"ranking",
																"exports"
															],
															"query": [
																{
																	"key": "size",
																	"value": "16"
																},
																{
																	"key": "state",
																	"value": "ELIGIBLE_OK",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Detail ranking view - pagination",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - pagination - check if the sum of the status is equal to totalElements\", function () {\r",
																	"    let jsonResponse = pm.response.json()\r",
																	"    const sum = jsonResponse.totalEligibleOk + jsonResponse.totalEligibleKo + jsonResponse.totalOnboardingKo;\r",
																	"    pm.expect(jsonResponse.totalElements).to.be.eql(sum);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - pagination - check totalPages number\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    const expectedPages = Math.ceil(jsonResponse.totalElements/jsonResponse.pageSize);\r",
																	"    pm.expect(jsonResponse.totalPages).to.be.eql(expectedPages);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 10000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}",
																"ranking",
																"exports"
															],
															"query": [
																{
																	"key": "beneficiary",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Resetting end date to initial value",
											"item": [
												{
													"name": "Forcing end date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Resetting end date to initial value - return status 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{rankingEndDate}}",
															"host": [
																"{{AKSAPIServerUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																":initiativeId",
																"reset-status-set-ranking-end-date"
															],
															"query": [
																{
																	"key": "rankingEndDate",
																	"value": "{{rankingEndDate}}"
																}
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Hhappy case - Initiative with ranking - ASC CIT have status ELIGIBLE_OK,ELIGIBLE_KO,ONBOARDING_KO - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "DESC CIT have status ELIGIBLE_OK,ELIGIBLE_KO,ONBOARDING_KO",
									"item": [
										{
											"name": "Initiative creation",
											"item": [
												{
													"name": "ENTE - Initiative creation",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Initiative with discount - Initiative with ranking - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP1-Insert Initiative (Service Info)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																			"\r",
																			"let moment = require('moment');\r",
																			"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																			"const serviceName = 'Test funzionali App IO Initiative with ranking ' + now;\r",
																			"pm.collectionVariables.set('serviceName', serviceName);\r",
																			"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																			"\r",
																			"pm.collectionVariables.set('channel_type', 'web');\r"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"// console.log('jsondata', jsonData);\r",
																			"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																			"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																			"\r",
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																			"    let jsonResponse = pm.response.json();\r",
																			"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/info",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"info"
																	]
																},
																"description": "Save initiative and first subset of data 'general info'"
															},
															"response": []
														},
														{
															"name": "STEP2-Update Initiative (general Info)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"let moment = require('moment');\r",
																			"//Format: YYYY-MM-DD\r",
																			"let today = String(moment().format('YYYY-MM-DD'));\r",
																			"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																			"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																			"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																			"\r",
																			"/*\r",
																			"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																			"pm.collectionVariables.set('...', _.random(0, 180));\r",
																			"*/\r",
																			"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																			"pm.collectionVariables.set('budget', 300);\r",
																			"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																			"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																			"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																			"pm.collectionVariables.set('rankingEnabled', true);\r",
																			"pm.collectionVariables.set('beneficiaryBudget', 100);\r",
																			"pm.collectionVariables.set('rankingStartDate', today);\r",
																			"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																			"pm.collectionVariables.set('startDate', todayP2);\r",
																			"pm.collectionVariables.set('endDate', todayP3);"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/general",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"general"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																},
																"description": "Save initiative and first subset of data 'general info'"
															},
															"response": []
														},
														{
															"name": "STEP3-Update Initiative (criteria)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"pm.collectionVariables.set('ruleIsee', 70000);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"LT\",\r\n            \"value\": \"{{ruleIsee}}\",\r\n            \"value2\": \"\",\r\n            \"orderDirection\": \"DESC\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId}}",
																		"beneficiary"
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP4-Update Initiative Trx-Reward rules",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"setTimeout(()=> {}, 10000)\r",
																			"const d = new Date();\r",
																			"dateString = d.toISOString()\r",
																			"let endTime = dateString.split('T');\r",
																			"endTime = endTime[1].split('Z');\r",
																			"\r",
																			"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																			"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																			"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																			"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																			"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																			"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																			"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																			"} else {\r",
																			"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																			"}\r",
																			"\r",
																			"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																			"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																			"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																			"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																			"pm.collectionVariables.set('trxCountFrom', 3);\r",
																			"pm.collectionVariables.set('trxCountTo', 11);\r",
																			"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																			"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"reward"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP5-Update Initiative Refund Rule",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																			"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"\r",
																			"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																			"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"\r",
																			"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																			"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																			"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																			"*/\r",
																			"\r",
																			"/*\r",
																			"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																			"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																			"\r",
																			"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																			"let body = {};\r",
																			"if (refundTypeSelected == \"timeParameter\") {\r",
																			"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																			"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"    body = {\r",
																			"        timeParameter: {\r",
																			"            timeType: timeType[timeTypeRandomIndex]\r",
																			"        }\r",
																			"    };\r",
																			"} else {\r",
																			"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																			"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																			"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																			"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																			"        body = {\r",
																			"            accumulatedAmount: {\r",
																			"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																			"            }\r",
																			"        };\r",
																			"    } else {\r",
																			"        body = {\r",
																			"            accumulatedAmount: {\r",
																			"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																			"                refundThreshold: 10\r",
																			"            }\r",
																			"        };\r",
																			"    }\r",
																			"}\r",
																			"*/\r",
																			"const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
																			"timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
																			"const body = {\r",
																			"    timeParameter: {\r",
																			"        timeType: timeType[timeTypeRandomIndex]\r",
																			"    }\r",
																			"};\r",
																			"pm.collectionVariables.set('body', JSON.stringify(body));\r",
																			"\r",
																			"pm.collectionVariables.set('body', JSON.stringify(body));"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{body}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"refund"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "PAGOPA - Initiative update status APPROVED",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Initiative with discount - Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																			"});\r",
																			"\r",
																			"//response time is less than 1s\r",
																			"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update initiative into APPROVED status",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//setTimeout(function(){}, 20000); //milliseconds"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalTokenPagopa}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId}}",
																		"approved"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "ENTE - Initiative PUBLISHED",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Initiative with discount - Initiative with ranking - Happy case - Initiative updating - Generate Portal Token (Ente Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																			"});\r",
																			"\r",
																			"//response time is less than 1s\r",
																			"tests[\"Response time is less than 2s\"] = responseTime < 2000;"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Initiative PUBLISHED",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Initiative updating - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/*let body;\r",
																			"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																			"if(baseUrlInitiative.includes('localhost')){\r",
																			"    body = {\r",
																			"        mode: 'raw',\r",
																			"        raw: JSON.stringify({\r",
																			"            organizationName: 'Comune di Milano',\r",
																			"            organizationFiscalCode: '11122233344',\r",
																			"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																			"            organizationUserRole: 'admin'\r",
																			"        })\r",
																			"    }\r",
																			"    pm.request.headers.add({\r",
																			"        key: \"Content-Type\",\r",
																			"        value: \"application/json\"\r",
																			"    });\r",
																			"    pm.variables.set('body', JSON.stringify(body));\r",
																			"    pm.request.body.update(body);\r",
																			"}\r",
																			"*/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId}}",
																		"published"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Onboarding",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 30000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{fiscalCode_fakeWhitelist}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 2",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_1}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 3",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_2}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_2}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 4",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_3}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_3}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 5",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_4}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_4}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 6",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_5}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_5}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 7",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_6}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_6}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 8",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_7}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_7}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 9",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_8}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_8}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 10",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_9}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_9}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 11",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_10}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_10}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 12",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_11}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_11}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 13",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_12}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_12}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 14",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_13}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_13}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 15",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_14}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_14}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 16",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_15}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_15}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Forcing end date",
											"item": [
												{
													"name": "Forcing end date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
																	"pm.collectionVariables.set('yesterday', yesterday);\r",
																	"\r",
																	"//setTimeout(() => {}, 7000);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Forcing end date - return status 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{yesterday}}",
															"host": [
																"{{AKSAPIServerUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																":initiativeId",
																"reset-status-set-ranking-end-date"
															],
															"query": [
																{
																	"key": "rankingEndDate",
																	"value": "{{yesterday}}"
																}
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Forcing ranking creation",
											"item": [
												{
													"name": "Forcing ranking creation",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Forcing ranking creation - return status 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Forcing ranking creation - check initiativeId\", function () {\r",
																	"     let jsonResponse = pm.response.json()\r",
																	"     const foundInitiative = jsonResponse.some((item) =>{\r",
																	"         return item.initiativeId === pm.collectionVariables.get(\"initiativeId\")\r",
																	"     });\r",
																	"    pm.expect(foundInitiative).equals(true); \r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrl}}/idpay/ranking/build/file/start",
															"host": [
																"{{AKSAPIServerUrl}}"
															],
															"path": [
																"idpay",
																"ranking",
																"build",
																"file",
																"start"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Forcing ranking pubblication",
											"item": [
												{
													"name": "Forcing ranking pubblication",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Forcing ranking pubblication - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 15000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/notified",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}",
																"ranking",
																"notified"
															]
														}
													},
													"response": []
												},
												{
													"name": "Detail ranking view - order and status check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json();\r",
																	"let eq_ELIGIBLE_OK = true;\r",
																	"let eq_ELIGIBLE_KO = true;\r",
																	"let eq_ONBOARDING_KO = true;\r",
																	"let N_ELIGIBLE_OK = 0;\r",
																	"let N_ELIGIBLE_KO = 0;\r",
																	"let N_ONBOARDING_KO = 0;\r",
																	"let counter = 0;\r",
																	"\r",
																	"const onboardingMax = pm.collectionVariables.get('budget') / pm.collectionVariables.get('beneficiaryBudget');\r",
																	"const ruleIseeCents = pm.collectionVariables.get('ruleIsee') * 100;\r",
																	"\r",
																	"\r",
																	"for (let i = 0; i < jsonResponse.content.length; i++) {\r",
																	"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_OK\") {\r",
																	"        N_ELIGIBLE_OK++;\r",
																	"    }\r",
																	"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_KO\") {\r",
																	"        N_ELIGIBLE_KO++;\r",
																	"    }\r",
																	"    if (jsonResponse.content[i].beneficiaryRankingStatus === \"ONBOARDING_KO\") {\r",
																	"        N_ONBOARDING_KO++;\r",
																	"    }\r",
																	"    if (jsonResponse.content[i].rankingValue < ruleIseeCents && counter < 3) {\r",
																	"        eq_ELIGIBLE_OK = eq_ELIGIBLE_OK && jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_OK\";\r",
																	"        counter++;\r",
																	"    }\r",
																	"\r",
																	"    else if (jsonResponse.content[i].rankingValue >= ruleIseeCents) {\r",
																	"        eq_ONBOARDING_KO = eq_ONBOARDING_KO && jsonResponse.content[i].beneficiaryRankingStatus === \"ONBOARDING_KO\";\r",
																	"    }\r",
																	"\r",
																	"    else if (jsonResponse.content[i].rankingValue < ruleIseeCents && counter === 3) {\r",
																	"        eq_ELIGIBLE_KO = eq_ELIGIBLE_KO && jsonResponse.content[i].beneficiaryRankingStatus === \"ELIGIBLE_KO\";\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ranking order is descendent\", function () {\r",
																	"    let eq = true;\r",
																	"    const responseFiltered = jsonResponse.content.filter((el) => {\r",
																	"        if (el.beneficiaryRankingStatus !== 'ONBOARDING_KO') {\r",
																	"            return el;\r",
																	"        }\r",
																	"    });\r",
																	"\r",
																	"    for (let i = 0; i < responseFiltered.length - 1; i++) {\r",
																	"        eq = eq && responseFiltered[i].rankingValue >= responseFiltered[i + 1].rankingValue;\r",
																	"    }\r",
																	"    pm.expect(eq).to.be.eql(true);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - The sum of the status (N_ELIGIBLE_OK, N_ELIGIBLE_KO and N_ONBOARDING_KO) is equal to the number of total elements\", function () {\r",
																	"    const total = N_ELIGIBLE_OK + N_ELIGIBLE_KO + N_ONBOARDING_KO;\r",
																	"    pm.expect(total).to.be.eql(jsonResponse.totalElements);\r",
																	"    pm.expect(total).to.be.eql(jsonResponse.content.length);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - The sum of the single status is equal to counters given in the response\", function () {\r",
																	"    pm.expect(jsonResponse.totalEligibleOk).to.be.eql(N_ELIGIBLE_OK);\r",
																	"    pm.expect(jsonResponse.totalEligibleKo).to.be.eql(N_ELIGIBLE_KO);\r",
																	"    pm.expect(jsonResponse.totalOnboardingKo).to.be.eql(N_ONBOARDING_KO);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ELIGIBLE_OK status corresponds to: beneficiary ISEE value is less than the ISEE initiative rule and the budget is not terminated\", function () {\r",
																	"    pm.expect(eq_ELIGIBLE_OK).to.be.eql(true);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ONBOARDING_KO status corresponds to: beneficiary ISEE value is greater than or equal to the ISEE initiative rule\", function () {\r",
																	"    pm.expect(eq_ONBOARDING_KO).to.be.eql(true);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with ranking - Happy case - CIT have status ELIGIBLE_OK, ELIGIBLE_KO , ONBOARDING_KO - Get Detail ranking view - Checking ELIGIBLE_KO status corresponds to: beneficiary ISEE value is less than the ISEE initiative rule and the budget is terminated\", function () {\r",
																	"    pm.expect(eq_ELIGIBLE_KO).to.be.eql(true);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 10000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports?size=16",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}",
																"ranking",
																"exports"
															],
															"query": [
																{
																	"key": "size",
																	"value": "16"
																},
																{
																	"key": "state",
																	"value": "ELIGIBLE_OK",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Detail ranking view - pagination",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - pagination - check if the sum of the status is equal to totalElements\", function () {\r",
																	"    let jsonResponse = pm.response.json()\r",
																	"    const sum = jsonResponse.totalEligibleOk + jsonResponse.totalEligibleKo + jsonResponse.totalOnboardingKo;\r",
																	"    pm.expect(jsonResponse.totalElements).to.be.eql(sum);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - pagination - check totalPages number\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    const expectedPages = Math.ceil(jsonResponse.totalElements/jsonResponse.pageSize);\r",
																	"    pm.expect(jsonResponse.totalPages).to.be.eql(expectedPages);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 10000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/idpay/initiative/{{initiativeId}}/ranking/exports",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																"{{initiativeId}}",
																"ranking",
																"exports"
															],
															"query": [
																{
																	"key": "beneficiary",
																	"value": "",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Resetting end date to initial value",
											"item": [
												{
													"name": "Forcing end date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Resetting end date to initial value - return status 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{AKSAPIServerUrl}}/idpay/initiative/:initiativeId/reset-status-set-ranking-end-date?rankingEndDate={{rankingEndDate}}",
															"host": [
																"{{AKSAPIServerUrl}}"
															],
															"path": [
																"idpay",
																"initiative",
																":initiativeId",
																"reset-status-set-ranking-end-date"
															],
															"query": [
																{
																	"key": "rankingEndDate",
																	"value": "{{rankingEndDate}}"
																}
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Hhappy case - Initiative with ranking - DESC CIT have status ELIGIBLE_OK,ELIGIBLE_KO,ONBOARDING_KO - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Initiative with whitelist",
							"item": [
								{
									"name": "ENTE - Initiative Creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 15000)\r",
															"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with whitelist and discount' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('budget', 20);\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', true);\r",
															"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3 Update Groups - upload correct file",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - STEP3 - Responses with 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - STEP3 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"status\");\r",
															"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
															"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": "{{basePath}}/example_fiscal_code.csv"
														}
													]
												},
												"url": {
													"raw": "{{baseUrlGroup}}/:initiativeId/upload",
													"host": [
														"{{baseUrlGroup}}"
													],
													"path": [
														":initiativeId",
														"upload"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules - DRAFT",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - STEP4 Draft - (Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)\r",
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"initiativeRewardType\": \"DISCOUNT\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward/draft",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward",
														"draft"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)\r",
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"initiativeRewardType\": \"DISCOUNT\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative creation - STEP5 - (Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"/*\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"*/\r",
															"\r",
															"const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
															"const body = {\r",
															"    timeParameter: {\r",
															"        timeType: timeType[timeTypeRandomIndex]\r",
															"    }\r",
															"};\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with discount - Initiative with whitelist - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with discount - Initiative with whitelist - Happy case - Initiative updating - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Initiative updating - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 30000)",
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with whitelist - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"if (jsonResponse.status !== 'ONBOARDING_OK') {\r",
															"    retryRequest(postman, pm, setTimeout, 5000);\r",
															"} else {\r",
															"    pm.test(\"Initiative with discount - Initiative discount - Happy case - Initiative with criteria - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    setTimeout(() => {\r",
															"\r",
															"        pm.test(\"Initiative with discount - Initiative discount - Happy case - Initiative with criteria - Onboarding - Status Onboarding - status ONBOARDING_OK\", function () {\r",
															"            pm.expect(jsonResponse.status).equals('ONBOARDING_OK');\r",
															"        });\r",
															"    }, 2000)\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 25000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "Accept-Language",
														"value": "it_IT",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Wallet Status Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseJson = pm.response.json()\r",
													"\r",
													"if (responseJson.status !== 'REFUNDABLE') {\r",
													"    retryRequest(postman, pm, setTimeout, 5000);\r",
													"} else {\r",
													"    pm.test(\"Initiative discount - Happy case - Initiative with whitelist - Get wallet status - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Initiative discount - Happy case - Initiative with whitelist - Get wallet status - Response status is REFUNDABLE\", function () {\r",
													"        pm.expect(responseJson.status).to.be.eql('REFUNDABLE');\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(() => {}, 5000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"wallet",
												"{{initiativeId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with discount - Happy case - Initiative with whitelist - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Initiative with criteria",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with discount - Initiative with criteria - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with criteria and discount ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initative discount - Initiative with criteria - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"beneficiary"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)\r",
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"/*\r",
															"let refundType = \"timeParameter\";\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = \"timeParameter\";\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"*/\r",
															"const timeType = [\"CLOSED\", \"DAILY\", \"WEEKLY\", \"MONTHLY\", \"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length - 1);\r",
															"const body = {\r",
															"    timeParameter: {\r",
															"        timeType: timeType[timeTypeRandomIndex]\r",
															"    }\r",
															"};\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with discount - Initiative with criteria - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with discount - Initiative with criteria - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Initiative with discount - Initiative with ranking - Happy case - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with ranking - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"if (jsonResponse.status !== 'ONBOARDING_OK') {\r",
															"    retryRequest(postman, pm, setTimeout, 5000);\r",
															"} else {\r",
															"    pm.test(\"Initiative discount - Happy case - Initiative with criteria - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    setTimeout(() => {\r",
															"\r",
															"        pm.test(\"Initiative discount - Happy case - Initiative with criteria - Onboarding - Status Onboarding - status ONBOARDING_OK\", function () {\r",
															"            pm.expect(jsonResponse.status).equals('ONBOARDING_OK');\r",
															"        });\r",
															"    }, 2000)\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 25000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													},
													{
														"key": "Accept-Language",
														"value": "it_IT",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get Wallet Status Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let responseJson = pm.response.json()\r",
													"\r",
													"if (responseJson.status !== 'REFUNDABLE') {\r",
													"    retryRequest(postman, pm, setTimeout, 5000);\r",
													"} else {\r",
													"    pm.test(\"Initiative discount - Happy case - Initiative with criteria - Get wallet status - Response status is 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Initiative discount - Happy case - Initiative with criteria - Get wallet status - Response status is REFUNDABLE\", function () {\r",
													"        pm.expect(responseJson.status).to.be.eql('REFUNDABLE');\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(() => {}, 15000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "{{Ocp-Apim-Trace}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"wallet",
												"{{initiativeId}}",
												"status"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Initiative with discount and criteria - enrollment of iban - 403",
							"item": [
								{
									"name": "Enroll Iban on initiative with discount",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - Enrollment of iban - Responses with code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - Enrollment of iban - Responses with excpected code and message\", function () {\r",
													"    let jsonResponse = pm.response.json();\r",
													"    pm.expect(jsonResponse.code).eql(\r",
													"        \"WALLET_ENROLL_IBAN_NOT_ALLOWED_FOR_DISCOUNT_INITIATIVE\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"iban\": \"{{IBAN_1}}\",\r\n    \"description\": \"conto cointestato\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/iban",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"wallet",
												"{{initiativeId}}",
												"iban"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enroll payment instrument - 403",
							"item": [
								{
									"name": "Enroll Instrument",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"if (jsonResponse.code !== 'WALLET_ENROLL_INSTRUMENT_NOT_ALLOWED_FOR_DISCOUNT_INITIATIVE') {\r",
													"    retryRequest(postman, pm, setTimeout, 5000);\r",
													"} else {\r",
													"    pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - Enrollment of payment instrument - Responses with code 403\", function () {\r",
													"        pm.response.to.have.status(403);\r",
													"    });\r",
													"\r",
													"    pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case -Enrollment of payment instrument - Responses with excpected code and message\", function () {\r",
													"        pm.expect(jsonResponse.code).eq(\r",
													"            \"WALLET_ENROLL_INSTRUMENT_NOT_ALLOWED_FOR_DISCOUNT_INITIATIVE\");\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 15000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/instruments/{{idwallet}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"wallet",
												"{{initiativeId}}",
												"instruments",
												"{{idwallet}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with discount - Unhappy case - Initiative with discount - Enroll payment instrument - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Initiative with discount - wrong refund type - 400 - bad request - accumulated amount",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with discount - Initiative with criteria - Unhappy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with criteria and discount ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with criteria - Happy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initative discount - Initiative with criteria - Unhappy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"beneficiary"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)\r",
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"initiativeRewardType\": \"DISCOUNT\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule - accumulatedAmount - THRESHOLD_REACHED - 400",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - wrong refund type - Initiative creation - STEP5 - Responses with 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - wrong refund type - Initiative creation - STEP5 - Responses with 400\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse.code).eql(\"INITIATIVE_INVALID_REQUEST\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"/*\r",
															"let refundType = \"timeParameter\";\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = \"timeParameter\";\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"*/\r",
															"const body = { accumulatedType: \"THRESHOLD_REACHED\", refundThreshold: 10 }\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule - accumulatedAmount - BUDGET_EXHAUSTED - 400",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - wrong refund type - Initiative creation - STEP5 - Responses with 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with discount - Initiative with criteria - Unhappy case - wrong refund type - Initiative creation - STEP5 - Responses with excpected code and message\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse.code).eql(\"INITIATIVE_INVALID_REQUEST\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"/*\r",
															"let refundType = \"timeParameter\";\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = \"timeParameter\";\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"*/\r",
															"const body = { accumulatedType: \"BUDGET_EXHAUSTED\" }\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with discount - Unhappy case - Initiative with discount wrong refund type bad request accumulated amount - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Initiative with NF",
			"item": [
				{
					"name": "Happy Case",
					"item": [
						{
							"name": "Initiative with criteria",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with NF - Happy case - Initiative with criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with NF - Happy case - Initiative with criteria - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'NF');\r",
															"const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
															"familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
															"const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
															"pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
															"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Happy case - Initiative with criteria - Initiative creation - Initiative with criteria - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"familyUnitComposition\": \"{{familyUnitComposition}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Happy case - Initiative with criteria - Initiative creation - STEP3 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"beneficiary"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Happy case - Initiative with criteria - Initiative creation - STEP4 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)\r",
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Happy case - Initiative with criteria - Initiative creation - STEP5 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"timeParameter\": {\r\n        \"timeType\": \"DAILY\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with NF - Happy case - Initiative with criteria - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Happy case - Initiative with criteria - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with NF - Happy case - Initiative with criteria - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Happy case - Initiative with criteria - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Initiative with NF - Happy case - Initiative with criteria - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Initiative with criteria",
							"item": [
								{
									"name": "BeneficiaryType PF and FamilyUnit not null - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
															"familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
															"const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
															"pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
															"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP2 - Responses with 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP2 - BeneficiaryType is PF and the field familyUnit is not empty\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_FAMILY_UNIT_COMPOSITION_NOT_VALID\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"familyUnitComposition\": \"{{familyUnitComposition}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - BeneficiaryType PF and FamilyUnit not null - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "BeneficiaryType NF and FamilyUnit is null - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'NF');\r",
															"const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
															"familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
															"const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
															"pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
															"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP2 - Responses with 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP2 - BeneficiaryType is NF and the field familyUnit is null\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_FAMILY_UNIT_COMPOSITION_NOT_VALID\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - BeneficiaryType NF and FamilyUnit is null - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "BeneficiaryType NF and FamilyUnit isn't one of INPS or ANPR - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'NF');\r",
															"const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
															"familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
															"const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
															"pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
															"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP2 - Responses with 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP2 - BeneficiaryType is NF and the field familyUnit is null\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_FAMILY_UNIT_COMPOSITION_NOT_VALID\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"familyUnitComposition\": \"TEST\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - BeneficiaryType NF and FamilyUnit isn't one of INPS or ANPR - Delete Initiative - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "BeneficiaryType NF and ISEE field is missing - 400",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Initiative with criteria NF ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'NF');\r",
															"const familyUnitCompositionValue = [\"INPS\", \"ANPR\"];\r",
															"familyUnitCompositionRandomIndex = _.random(0, familyUnitCompositionValue.length - 1);\r",
															"const selectedFamilyUnitCompositionValue = familyUnitCompositionValue[familyUnitCompositionRandomIndex];\r",
															"pm.collectionVariables.set('familyUnitComposition', selectedFamilyUnitCompositionValue);\r",
															"//pm.collectionVariables.set('familyUnitComposition', 'INPS');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"familyUnitComposition\": \"{{familyUnitComposition}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP3 - Responses with 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - Initiative creation - STEP3 - Beneficiary Type is NF and the field ISEE is missing\", function () {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"INITIATIVE_AUTOMATED_CRITERIA_NOT_VALID_BENEFICIARY_NF_ISEE_MISSING\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"code\": \"BIRTHDAY\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\"\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"beneficiary"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete Initiative",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Initiative with NF - Unhappy case - Initiative with criteria - BeneficiaryType NF and ISEE field is missing - Status test 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
													"host": [
														"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
													],
													"path": [
														"idpay",
														"initiative",
														"{{initiativeId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Suspension",
			"item": [
				{
					"name": "Happy Case - OK idemp",
					"item": [
						{
							"name": "Initiative creation",
							"item": [
								{
									"name": "ENTE - Initiative creation",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Suspension - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP1-Insert Initiative (Service Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
															"const serviceName = 'Test funzionali App IO Suspension Initiative with criteria ' + now;\r",
															"pm.collectionVariables.set('serviceName', serviceName);\r",
															"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"\r",
															"pm.collectionVariables.set('channel_type', 'web');\r"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);\r",
															"// console.log('jsondata', jsonData);\r",
															"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
															"pm.collectionVariables.set('initiativeId-suspend', jsonData.initiativeId);\r",
															"\r",
															"pm.test(\"Suspension/Readmission - Happy case - Initiative creation - STEP1 - Responses with 201\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Suspension/Readmission - Happy case - Initiative creation - STEP1 - Verify response body\", function () {\r",
															"    let jsonResponse = pm.response.json();\r",
															"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/info",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"info"
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP2-Update Initiative (general Info)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"let moment = require('moment');\r",
															"//Format: YYYY-MM-DD\r",
															"let today = String(moment().format('YYYY-MM-DD'));\r",
															"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
															"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
															"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
															"\r",
															"let yesterday = String(moment().subtract(1, 'days').format('YYYY-MM-DD'));\r",
															"\r",
															"\r",
															"/*\r",
															"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
															"pm.collectionVariables.set('...', _.random(0, 180));\r",
															"*/\r",
															"//_.floor(_.random(1.0, 100000.0, true),2)\r",
															"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
															"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
															"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
															"pm.collectionVariables.set('beneficiaryKnown', false);\r",
															"pm.collectionVariables.set('rankingEnabled', false);\r",
															"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
															"pm.collectionVariables.set('rankingStartDate', today);\r",
															"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
															"pm.collectionVariables.set('startDate', todayP2);\r",
															"pm.collectionVariables.set('endDate', todayP3);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\" Suspension/Readmission - Happy case - Initiative creation - STEP2 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/general",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"general"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId-suspend}}",
															"description": "(Required) The initiative ID"
														}
													]
												},
												"description": "Save initiative and first subset of data 'general info'"
											},
											"response": []
										},
										{
											"name": "STEP3-Update Initiative (criteria)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension/Readmission - Happy case - Initiative creation - STEP3 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend}}/beneficiary",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId-suspend}}",
														"beneficiary"
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP4-Update Initiative Trx-Reward rules",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension/Readmission - Happy case - Initiative creation - STEP4 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 10000)\r",
															"const d = new Date();\r",
															"dateString = d.toISOString()\r",
															"let endTime = dateString.split('T');\r",
															"endTime = endTime[1].split('Z');\r",
															"\r",
															"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
															"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
															"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
															"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
															"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
															"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
															"} else {\r",
															"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
															"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
															"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
															"pm.collectionVariables.set('trxThresholdTo', 50);\r",
															"pm.collectionVariables.set('trxCountFrom', 3);\r",
															"pm.collectionVariables.set('trxCountTo', 11);\r",
															"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
															"pm.collectionVariables.set('trxRewardLimitValue', 3);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"initiativeRewardType\": \"REFUND\",\n    \"rewardRule\": {\n        \"_type\": \"{{rewardRuleType}}\",\n        \"rewardValue\": {{rewardRuleValue}},\n        \"rewardValueType\": \"{{rewardValueType}}\"\n    },\n    \"trxRule\": {\n        \"daysOfWeek\": [\n            {\n                \"daysOfWeek\": [\n                    \"{{trxDaysOfWeek}}\"\n                ],\n                \"intervals\": [\n                    {\n                        \"startTime\": \"00:00:00.000\",\n                        \"endTime\": \"{{trxDayEndTime}}\"\n                    }\n                ]\n            }\n        ],\n        \"threshold\": {\n            \"from\": {{trxThresholdFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxThresholdTo}},\n            \"toIncluded\": true\n        },\n        \"mccFilter\": {\n            \"allowedList\": true,\n            \"values\": [\n                \"0742\",\n                \"0743\",\n                \"0744\"\n            ]\n        },\n        \"trxCount\": {\n            \"from\": {{trxCountFrom}},\n            \"fromIncluded\": true,\n            \"to\": {{trxCountTo}},\n            \"toIncluded\": true\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"reward"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId-suspend}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "STEP5-Update Initiative Refund Rule",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension/Readmission - Happy case - Initiative creation - STEP5 - Responses with 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
															"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"\r",
															"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
															"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
															"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
															"*/\r",
															"\r",
															"\r",
															"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
															"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
															"\r",
															"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
															"let body = {};\r",
															"if (refundTypeSelected == \"timeParameter\") {\r",
															"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
															"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
															"    body = {\r",
															"        timeParameter: {\r",
															"            timeType: timeType[timeTypeRandomIndex]\r",
															"        }\r",
															"    };\r",
															"} else {\r",
															"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
															"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
															"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
															"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
															"            }\r",
															"        };\r",
															"    } else {\r",
															"        body = {\r",
															"            accumulatedAmount: {\r",
															"                accumulatedType: \"THRESHOLD_REACHED\",\r",
															"                refundThreshold: 10\r",
															"            }\r",
															"        };\r",
															"    }\r",
															"}\r",
															"\r",
															"pm.collectionVariables.set('body', JSON.stringify(body));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{body}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														":initiativeId",
														"refund"
													],
													"variable": [
														{
															"key": "initiativeId",
															"value": "{{initiativeId-suspend}}",
															"description": "(Required) The initiative ID"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PAGOPA - Initiative update status APPROVED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Suspension/Readmission - Happy case - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update initiative into APPROVED status",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension/Readmission - Happy case - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(function(){}, 20000); //milliseconds"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalTokenPagopa}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend}}/approved",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId-suspend}}",
														"approved"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "ENTE - Initiative PUBLISHED",
									"item": [
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Suspension/Readmission - Happy case - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															"\r",
															"//response time is less than 1s\r",
															"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Initiative PUBLISHED",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension/Readmission - Happy case - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/*let body;\r",
															"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
															"if(baseUrlInitiative.includes('localhost')){\r",
															"    body = {\r",
															"        mode: 'raw',\r",
															"        raw: JSON.stringify({\r",
															"            organizationName: 'Comune di Milano',\r",
															"            organizationFiscalCode: '11122233344',\r",
															"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
															"            organizationUserRole: 'admin'\r",
															"        })\r",
															"    }\r",
															"    pm.request.headers.add({\r",
															"        key: \"Content-Type\",\r",
															"        value: \"application/json\"\r",
															"    });\r",
															"    pm.variables.set('body', JSON.stringify(body));\r",
															"    pm.request.body.update(body);\r",
															"}\r",
															"*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disabledSystemHeaders": {}
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend}}/published",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId-suspend}}",
														"published"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Onboarding",
							"item": [
								{
									"name": "Generate Token IO",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Suspension - Happy case - Onboarding - Generate Token IO', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{genericSubscriptionKey}}",
												"type": "default"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"rtd",
												"mock-io",
												"login"
											],
											"query": [
												{
													"key": "fiscalCode",
													"value": "{{fiscalCode_fakeWhitelist}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Accept T&C",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Suspension/Readmission - Happy case - Onboarding - Accept T&C - return status 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 15000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId-suspend}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Prerequisites Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Suspension/Readmission - Happy case - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId-suspend}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/initiative",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"initiative"
											]
										}
									},
									"response": []
								},
								{
									"name": "PDND + Autocertification",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Suspension/Readmission - Happy case - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId-suspend}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/consent",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"consent"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Generate Portal Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Suspension - Happy case OK idemp - Generate Portal Token (Ente Admin) for citizen suspension', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/welfare/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"welfare",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Suspend",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(()=> {}, 20000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Suspension - Happy case OK idemp - suspending the citizen from the initiative - HTTP status 200', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									},
									{
										"key": "Fiscal-Code",
										"value": "{{fiscalCode_fakeWhitelist}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend}}/reward/suspend",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId-suspend}}",
										"reward",
										"suspend"
									]
								}
							},
							"response": []
						},
						{
							"name": "Suspend idemp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(() => { }, 10000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Suspension - Happy case OK idemp - suspending the citizen already suspended from the initiative - HTTP status 200', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"type": "default",
										"value": "true"
									},
									{
										"key": "Fiscal-Code",
										"type": "text",
										"value": "{{fiscalCode_fakeWhitelist}}"
									}
								],
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend}}/reward/suspend",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId-suspend}}",
										"reward",
										"suspend"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Try to suspend CIT in status ON_EVALUATION,ACCEPTED_TC (WALLET NOT FOUND)",
							"item": [
								{
									"name": "Initiative with ranking creation",
									"item": [
										{
											"name": "Initiative creation",
											"item": [
												{
													"name": "ENTE - Initiative creation",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP1-Insert Initiative (Service Info)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																			"\r",
																			"let moment = require('moment');\r",
																			"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																			"const serviceName = 'Test funzionali App IO Suspension Initiative with ranking ' + now;\r",
																			"pm.collectionVariables.set('serviceName', serviceName);\r",
																			"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																			"\r",
																			"pm.collectionVariables.set('channel_type', 'web');\r"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"var jsonData = JSON.parse(responseBody);\r",
																			"// console.log('jsondata', jsonData);\r",
																			"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																			"pm.collectionVariables.set('initiativeId-suspend2', jsonData.initiativeId);\r",
																			"\r",
																			"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																			"    let jsonResponse = pm.response.json();\r",
																			"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/info",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"info"
																	]
																},
																"description": "Save initiative and first subset of data 'general info'"
															},
															"response": []
														},
														{
															"name": "STEP2-Update Initiative (general Info)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"let moment = require('moment');\r",
																			"//Format: YYYY-MM-DD\r",
																			"let today = String(moment().format('YYYY-MM-DD'));\r",
																			"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																			"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																			"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																			"\r",
																			"/*\r",
																			"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																			"pm.collectionVariables.set('...', _.random(0, 180));\r",
																			"*/\r",
																			"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																			"pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																			"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																			"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																			"pm.collectionVariables.set('beneficiaryKnown', false);\r",
																			"pm.collectionVariables.set('rankingEnabled', true);\r",
																			"pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																			"pm.collectionVariables.set('rankingStartDate', today);\r",
																			"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																			"pm.collectionVariables.set('startDate', todayP2);\r",
																			"pm.collectionVariables.set('endDate', todayP3);"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative creation - STEP2 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"rankingEnabled\": {{rankingEnabled}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/general",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"general"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId-suspend2}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																},
																"description": "Save initiative and first subset of data 'general info'"
															},
															"response": []
														},
														{
															"name": "STEP3-Update Initiative (criteria)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"automatedCriteria\": [\r\n        {\r\n            \"authority\": \"INPS\",\r\n            \"code\": \"ISEE\",\r\n            \"operator\": \"GT\",\r\n            \"value\": \"1\",\r\n            \"value2\": \"\",\r\n            \"orderDirection\": \"ASC\",\r\n            \"iseeTypes\": [\r\n                \"ORDINARIO\",\r\n                \"MINORENNE\",\r\n                \"UNIVERSITARIO\",\r\n                \"SOCIOSANITARIO\",\r\n                \"DOTTORATO\",\r\n                \"RESIDENZIALE\",\r\n                \"CORRENTE\"\r\n            ]\r\n        }\r\n    ],\r\n    \"selfDeclarationCriteria\": []\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend2}}/beneficiary",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId-suspend2}}",
																		"beneficiary"
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP4-Update Initiative Trx-Reward rules",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative creation - STEP3 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"setTimeout(()=> {}, 10000)\r",
																			"const d = new Date();\r",
																			"dateString = d.toISOString()\r",
																			"let endTime = dateString.split('T');\r",
																			"endTime = endTime[1].split('Z');\r",
																			"\r",
																			"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																			"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																			"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																			"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																			"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																			"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																			"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																			"} else {\r",
																			"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																			"}\r",
																			"\r",
																			"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																			"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																			"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																			"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																			"pm.collectionVariables.set('trxCountFrom', 3);\r",
																			"pm.collectionVariables.set('trxCountTo', 11);\r",
																			"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																			"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{ \n  \"initiativeRewardType\": \"REFUND\",\n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"reward"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId-suspend2}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "STEP5-Update Initiative Refund Rule",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative creation - STEP5 - Responses with 204\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																			"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"\r",
																			"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																			"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"\r",
																			"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																			"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																			"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																			"*/\r",
																			"\r",
																			"\r",
																			"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																			"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																			"\r",
																			"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																			"let body = {};\r",
																			"if (refundTypeSelected == \"timeParameter\") {\r",
																			"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																			"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																			"    body = {\r",
																			"        timeParameter: {\r",
																			"            timeType: timeType[timeTypeRandomIndex]\r",
																			"        }\r",
																			"    };\r",
																			"} else {\r",
																			"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																			"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																			"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																			"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																			"        body = {\r",
																			"            accumulatedAmount: {\r",
																			"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																			"            }\r",
																			"        };\r",
																			"    } else {\r",
																			"        body = {\r",
																			"            accumulatedAmount: {\r",
																			"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																			"                refundThreshold: 10\r",
																			"            }\r",
																			"        };\r",
																			"    }\r",
																			"}\r",
																			"\r",
																			"pm.collectionVariables.set('body', JSON.stringify(body));"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{body}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		":initiativeId",
																		"refund"
																	],
																	"variable": [
																		{
																			"key": "initiativeId",
																			"value": "{{initiativeId-suspend2}}",
																			"description": "(Required) The initiative ID"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "PAGOPA - Initiative update status APPROVED",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																			"});\r",
																			"\r",
																			"//response time is less than 1s\r",
																			"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Update initiative into APPROVED status",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"//setTimeout(function(){}, 20000); //milliseconds"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalTokenPagopa}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend2}}/approved",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId-suspend2}}",
																		"approved"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "ENTE - Initiative PUBLISHED",
													"item": [
														{
															"name": "Generate Portal Token",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"let textResponse = pm.response.text()\r",
																			"\r",
																			"pm.test('Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative publication - Generate Portal Token (Ente Admin)', () => {\r",
																			"    //verify response HTTP status \r",
																			"    pm.response.to.have.status(200);\r",
																			"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																			"});\r",
																			"\r",
																			"//response time is less than 1s\r",
																			"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Ocp-Apim-Trace",
																		"value": "true",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrlToken}}/welfare/token/test",
																	"host": [
																		"{{baseUrlToken}}"
																	],
																	"path": [
																		"welfare",
																		"token",
																		"test"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Initiative PUBLISHED",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative publication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																			"    pm.response.to.have.status(204);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/*let body;\r",
																			"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																			"if(baseUrlInitiative.includes('localhost')){\r",
																			"    body = {\r",
																			"        mode: 'raw',\r",
																			"        raw: JSON.stringify({\r",
																			"            organizationName: 'Comune di Milano',\r",
																			"            organizationFiscalCode: '11122233344',\r",
																			"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																			"            organizationUserRole: 'admin'\r",
																			"        })\r",
																			"    }\r",
																			"    pm.request.headers.add({\r",
																			"        key: \"Content-Type\",\r",
																			"        value: \"application/json\"\r",
																			"    });\r",
																			"    pm.variables.set('body', JSON.stringify(body));\r",
																			"    pm.request.body.update(body);\r",
																			"}\r",
																			"*/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disabledSystemHeaders": {}
															},
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{identityPortalToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "PUT",
																"header": [],
																"url": {
																	"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend2}}/published",
																	"host": [
																		"{{baseUrlInitiative}}"
																	],
																	"path": [
																		"{{initiativeId-suspend2}}",
																		"published"
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "Onboarding 1",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 60000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_1}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId-suspend2}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Status Onboarding",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json()\r",
																	"\r",
																	"if (jsonResponse.status !== 'ACCEPTED_TC') {\r",
																	"    retryRequest(postman, pm, setTimeout, 5000);\r",
																	"} else {\r",
																	"    pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"\r",
																	"    setTimeout(() => {\r",
																	"\r",
																	"        pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Status Onboarding - status ON_EVALUATION\", function () {\r",
																	"            pm.expect(jsonResponse.status).equals('ACCEPTED_TC');\r",
																	"        });\r",
																	"    }, 2000)\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 15000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId-suspend2}}/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"{{initiativeId-suspend2}}",
																"status"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Onboarding 2",
											"item": [
												{
													"name": "Generate Token IO",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test('Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Generate Token IO', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 60000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{genericSubscriptionKey}}",
																"type": "default"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "default"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_2}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"rtd",
																"mock-io",
																"login"
															],
															"query": [
																{
																	"key": "fiscalCode",
																	"value": "{{CF_fake_2}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Accept T&C",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Accept T&C - return status 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId-suspend2}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "Prerequisites Check",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
																	"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Ocp-Apim-Subscription-Key",
																"value": "{{apimSubscriptionKey}}",
																"type": "text"
															},
															{
																"key": "Ocp-Apim-Trace",
																"value": "true",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId-suspend2}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/initiative",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"initiative"
															]
														}
													},
													"response": []
												},
												{
													"name": "PDND + Autocertification",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId-suspend2}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/consent",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"consent"
															]
														}
													},
													"response": []
												},
												{
													"name": "Status Onboarding",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let jsonResponse = pm.response.json()\r",
																	"\r",
																	"if (jsonResponse.status !== 'ON_EVALUATION') {\r",
																	"    retryRequest(postman, pm, setTimeout, 5000);\r",
																	"} else {\r",
																	"    pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
																	"        pm.response.to.have.status(200);\r",
																	"    });\r",
																	"\r",
																	"    setTimeout(() => {\r",
																	"\r",
																	"        pm.test(\"Suspension/Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Onboarding - Status Onboarding - status ON_EVALUATION\", function () {\r",
																	"            pm.expect(jsonResponse.status).equals('ON_EVALUATION');\r",
																	"        });\r",
																	"    }, 2000)\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 15000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{tokenIO}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId-suspend2}}/status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"idpay",
																"onboarding",
																"{{initiativeId-suspend2}}",
																"status"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen suspension', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspend KO - Status Accepted TC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - suspending ACCEPTED_TC citizen from the initiative - checking error code', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"REWARD_NOTIFICATION_USER_SUSPENSION_ERROR\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake_1}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend2}}/reward/suspend",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId-suspend2}}",
												"reward",
												"suspend"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspend KO - Status ON_EVALUATION",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - suspending ON_EVALUATION citizen from the initiative - checking error code', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"REWARD_NOTIFICATION_USER_SUSPENSION_ERROR\");\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake_2}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend2}}/reward/suspend",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId-suspend2}}",
												"reward",
												"suspend"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND)",
							"item": [
								{
									"name": "Initiative with whitelist creation",
									"item": [
										{
											"name": "ENTE - Initiative Creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 15000)\r",
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Suspension Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \n  \"initiativeRewardType\": \"REFUND\",   \n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP5 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative pubblication - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 30000)",
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen suspension', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Suspend KO - Status INVITED",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - suspending INVITED citizen from the initiative - checking error code', () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"REWARD_NOTIFICATION_USER_SUSPENSION_ERROR\");\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													},
													{
														"key": "Fiscal-Code",
														"value": "{{fiscalCode_fakeWhitelist}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/reward/suspend",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"reward",
														"suspend"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding only Accept TC",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 60000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"setTimeout(()=>{ \r",
															"\r",
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - status ACCEPTED_TC\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).equals('ACCEPTED_TC');\r",
															"});\r",
															" },2000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen suspension', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Suspend KO - Status ACCEPT_TC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Suspension - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - suspending ON_EVALUATION citizen from the initiative - checking error code', () => {\r",
															"    const responseJson = pm.response.json();\r",
															"    pm.expect(responseJson.code).to.eql(\"REWARD_NOTIFICATION_USER_SUSPENSION_ERROR\");\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													},
													{
														"key": "Fiscal-Code",
														"value": "{{fiscalCode_fakeWhitelist}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/reward/suspend",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"reward",
														"suspend"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 2",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_1}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).equals(403);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															"\r",
															"if (jsonResponse.status !== 'ONBOARDING_KO') {\r",
															"    retryRequest(postman, pm, setTimeout, 5000);\r",
															"} else {\r",
															"    pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"        pm.response.to.have.status(200);\r",
															"    });\r",
															"\r",
															"    setTimeout(() => {\r",
															"\r",
															"        pm.test(\"Initiative with discount - Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - status ONBOARDING_KO\", function () {\r",
															"            pm.expect(jsonResponse.status).equals('ONBOARDING_KO');\r",
															"        });\r",
															"    }, 2000)\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 3",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 60000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"setTimeout(()=>{ \r",
															"\r",
															"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - status ONBOARDING_OK\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).equals('ONBOARDING_OK');\r",
															"});\r",
															" },2000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Unsubscribe - Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Unsubscribed wallet & user - Unsubscribe - Response status is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/unsubscribe",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"wallet",
												"{{initiativeId}}",
												"unsubscribe"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//setTimeout(()=> {}, 15000)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													"\r",
													"if (jsonResponse.status !== 'UNSUBSCRIBED') {\r",
													"    retryRequest(postman, pm, setTimeout, 5000);\r",
													"} else {\r",
													"    pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
													"        pm.response.to.have.status(200);\r",
													"    });\r",
													"\r",
													"    setTimeout(() => {\r",
													"\r",
													"        pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - status UNSUBSCRIBED\", function () {\r",
													"            pm.expect(jsonResponse.status).equals('UNSUBSCRIBED');\r",
													"        });\r",
													"    }, 2000)\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Portal Token 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen suspension', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspend KO - Status ONBOARDING_KO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - suspending ONBOARDING_KO citizen from the initiative - checking error code', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"REWARD_NOTIFICATION_USER_SUSPENSION_ERROR\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_1}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/reward/suspend",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"reward",
												"suspend"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspend KO - Status UNSUBSCRIBED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - suspending UNSUBSCRIBED citizen from the initiative - checking error code', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"REWARD_NOTIFICATION_USER_SUSPENSION_ERROR\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{fiscalCode_fakeWhitelist}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/reward/suspend",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"reward",
												"suspend"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Try to suspend CIT with an initiative Id fake - 404",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen suspension', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspend",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - suspending citizen from the fake initiative - checking status 404', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Suspension - Unhappy case - Try to suspend CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - suspending citizen from the fake initiative - checking error code', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"REWARD_NOTIFICATION_INITIATIVE_NOT_FOUND\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{fiscalCode_fakeWhitelist}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId-fake}}/reward/suspend",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId-fake}}",
												"reward",
												"suspend"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Readmission",
			"item": [
				{
					"name": "Happy Case - OK idemp",
					"item": [
						{
							"name": "Generate Portal Token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Readmission - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrlToken}}/welfare/token/test",
									"host": [
										"{{baseUrlToken}}"
									],
									"path": [
										"welfare",
										"token",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Readmit",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(()=> {}, 10000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Readmission - Happy case OK idemp - readmitting the citizen to the initiative - HTTP status 200', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									},
									{
										"key": "Fiscal-Code",
										"value": "{{fiscalCode_fakeWhitelist}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend}}/reward/readmit",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId-suspend}}",
										"reward",
										"readmit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Readmit idemp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setTimeout(()=> {}, 10000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"let textResponse = pm.response.text()\r",
											"\r",
											"pm.test('Readmission - Happy case OK idemp - readmitting the citizen already readmitted to the initiative - HTTP status 200', () => {\r",
											"    //verify response HTTP status \r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{identityPortalToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Ocp-Apim-Trace",
										"value": "true",
										"type": "default"
									},
									{
										"key": "Fiscal-Code",
										"value": "{{fiscalCode_fakeWhitelist}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend}}/reward/readmit",
									"host": [
										"{{baseUrlInitiative}}"
									],
									"path": [
										"{{initiativeId-suspend}}",
										"reward",
										"readmit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Initiative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Readmission - Happy Case OK idemp - Delete Initiative - Status test 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId-suspend}}",
									"host": [
										"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
									],
									"path": [
										"idpay",
										"initiative",
										"{{initiativeId-suspend}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Unhappy Case",
					"item": [
						{
							"name": "Try to readmit CIT in status ON_EVALUATION,ACCEPTED_TC (WALLET NOT FOUND)",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test(' Readmission - Unhappy case - Try to readmit CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Readmit KO - Status Accepted TC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Readmission - Unhappy case - Try to readmit CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - readmitting ACCEPTED_TC citizen to the initiative - checking status 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_fake_1}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend2}}/reward/readmit",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId-suspend2}}",
												"reward",
												"readmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Readmit KO - Status ON_EVALUATION",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Readmission - Unhappy case - Try to readmit CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - readmitting ON_EVALUATION citizen to the initiative - checking status 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"type": "default",
												"value": "true"
											},
											{
												"key": "Fiscal-Code",
												"type": "text",
												"value": "{{CF_fake_2}}"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId-suspend2}}/reward/readmit",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId-suspend2}}",
												"reward",
												"readmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Readmission - Unhappy case - Try to suspend CIT in status ON_EVALUATION,ACCEPTED_TC (WALLET NOT FOUND) - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId-suspend2}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId-suspend2}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND)",
							"item": [
								{
									"name": "Initiative with whitelist creation",
									"item": [
										{
											"name": "ENTE - Initiative Creation",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP1-Insert Initiative (Service Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(()=> {}, 15000)\r",
																	"//pm.collectionVariables.set('serviceId', pm.variables.replaceIn('{{$randomUUID}}'));\r",
																	"let moment = require('moment');\r",
																	"const now = String(moment().format('DD-MM-YYYY hh:mm'));\r",
																	"const serviceName = 'Test funzionali App IO Readmission Initiative with whitelist ' + now;\r",
																	"pm.collectionVariables.set('serviceName', serviceName);\r",
																	"\r",
																	"pm.collectionVariables.set('description', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"\r",
																	"pm.collectionVariables.set('channel_type', 'web');\r"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var jsonData = JSON.parse(responseBody);\r",
																	"// console.log('jsondata', jsonData);\r",
																	"// console.log('jsondata.initiativeId', jsonData.initiativeId);\r",
																	"pm.collectionVariables.set('initiativeId', jsonData.initiativeId);\r",
																	"\r",
																	"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP1 - Responses with 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Initiative with discount - Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP1 - Response body must contain initiativeId field\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"initiativeId\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"serviceIO\": true,\n    \"serviceName\": \"{{serviceName}}\",\n    \"serviceScope\": \"LOCAL\",\n    \"description\": \"{{description}}\",\n    \"privacyLink\": \"https://www.google.it\",\n    \"tcLink\": \"https://www.google.com\",\n    \"channels\": [\n        {\n            \"type\": \"{{channel_type}}\",\n            \"contact\": \"https://www.google.com\"\n        }\n    ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/info",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"info"
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP2-Update Initiative (general Info)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"let moment = require('moment');\r",
																	"//Format: YYYY-MM-DD\r",
																	"let today = String(moment().format('YYYY-MM-DD'));\r",
																	"let todayP1 = String(moment().add(1,'months').format('YYYY-MM-DD'));\r",
																	"let todayP2 = String(moment().add(2,'months').format('YYYY-MM-DD'));\r",
																	"let todayP3 = String(moment().add(3,'months').format('YYYY-MM-DD'));\r",
																	"\r",
																	"/*\r",
																	"var futureDate = pm.variables.replaceIn('{{$$randomDateFuture}}');\r",
																	"pm.collectionVariables.set('...', _.random(0, 180));\r",
																	"*/\r",
																	"//_.floor(_.random(1.0, 100000.0, true),2)\r",
																	"//pm.collectionVariables.set('budget', _.floor(_.random(10000, 100000, true),2));\r",
																	"pm.collectionVariables.set('budget', 20);\r",
																	"pm.collectionVariables.set('beneficiaryType', 'PF');\r",
																	"//pm.collectionVariables.set('beneficiaryKnown', pm.variables.replaceIn('{{$randomBoolean}}'));\r",
																	"pm.collectionVariables.set('beneficiaryKnown', true);\r",
																	"//pm.collectionVariables.set('beneficiaryBudget', pm.variables.replaceIn('{{$randomInt}}'));//default max 1000\r",
																	"pm.collectionVariables.set('beneficiaryBudget', 10);//default max 1000\r",
																	"pm.collectionVariables.set('rankingStartDate', today);\r",
																	"pm.collectionVariables.set('rankingEndDate', todayP1);\r",
																	"pm.collectionVariables.set('startDate', todayP2);\r",
																	"pm.collectionVariables.set('endDate', todayP3);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - STEP2 - Responses with 204\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"budget\": {{budget}},\n    \"beneficiaryType\": \"{{beneficiaryType}}\",\n    \"beneficiaryKnown\": {{beneficiaryKnown}},\n    \"beneficiaryBudget\": {{beneficiaryBudget}},\n    \"rankingStartDate\": \"{{rankingStartDate}}\",\n    \"rankingEndDate\": \"{{rankingEndDate}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"endDate\": \"{{endDate}}\",\n    \"descriptionMap\": {\n        \"it\": \"it\"\n    }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/general",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"general"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														},
														"description": "Save initiative and first subset of data 'general info'"
													},
													"response": []
												},
												{
													"name": "STEP3 Update Groups - upload correct file",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP3 - Responses with 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP3 - Verify response body\", function () {\r",
																	"    let jsonResponse = pm.response.json();\r",
																	"    pm.expect(jsonResponse).have.property(\"status\");\r",
																	"    pm.expect(jsonResponse.status).contain('DRAFT');\r",
																	"    pm.expect(jsonResponse).have.property(\"elabTimeStamp\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "file",
																	"type": "file",
																	"src": "{{basePath}}/example_fiscal_code.csv"
																}
															]
														},
														"url": {
															"raw": "{{baseUrlGroup}}/:initiativeId/upload",
															"host": [
																"{{baseUrlGroup}}"
															],
															"path": [
																":initiativeId",
																"upload"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP4-Update Initiative Trx-Reward rules",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP4 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 10000)\r",
																	"const d = new Date();\r",
																	"dateString = d.toISOString()\r",
																	"let endTime = dateString.split('T');\r",
																	"endTime = endTime[1].split('Z');\r",
																	"\r",
																	"pm.collectionVariables.set('rewardRuleType', 'rewardValue');\r",
																	"const rewardValueTypes = [\"PERCENTAGE\", \"ABSOLUTE\"];\r",
																	"rewardValueTypeRandomIndex = _.random(0, rewardValueTypes.length - 1);\r",
																	"const selectedRewardValueType = rewardValueTypes[rewardValueTypeRandomIndex];\r",
																	"pm.collectionVariables.set('rewardValueType', selectedRewardValueType);\r",
																	"if (selectedRewardValueType == \"PERCENTAGE\") {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 100);\r",
																	"} else {\r",
																	"    pm.collectionVariables.set('rewardRuleValue', 1);\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('trxDaysOfWeek', pm.variables.replaceIn('{{$randomWeekday}}').toString().toUpperCase());\r",
																	"pm.collectionVariables.set('trxDayEndTime', endTime[0]);\r",
																	"pm.collectionVariables.set('trxThresholdFrom', 10);\r",
																	"pm.collectionVariables.set('trxThresholdTo', 50);\r",
																	"pm.collectionVariables.set('trxCountFrom', 3);\r",
																	"pm.collectionVariables.set('trxCountTo', 11);\r",
																	"pm.collectionVariables.set('trxRewardLimitFrequency', 'DAILY');\r",
																	"pm.collectionVariables.set('trxRewardLimitValue', 3);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"initiativeRewardType\": \"REFUND\",  \n  \"rewardRule\": {\n    \"_type\": \"{{rewardRuleType}}\",\n    \"rewardValue\": {{rewardRuleValue}},\n    \"rewardValueType\": \"{{rewardValueType}}\"\n  },\n  \"trxRule\": {\n    \"daysOfWeek\": [\n      {\n        \"daysOfWeek\": [\n          \"{{trxDaysOfWeek}}\"\n        ],\n        \"intervals\": [\n          {\n            \"startTime\": \"00:00:00.000\",\n            \"endTime\": \"{{trxDayEndTime}}\"\n          }\n        ]\n      }\n    ],\n    \"threshold\": {\n      \"from\": {{trxThresholdFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxThresholdTo}},\n      \"toIncluded\": true\n    },\n    \"mccFilter\": {\n      \"allowedList\": true,\n      \"values\": [\n        \"0742\", \"0743\", \"0744\"\n      ]\n    },\n    \"trxCount\": {\n      \"from\": {{trxCountFrom}},\n      \"fromIncluded\": true,\n      \"to\": {{trxCountTo}},\n      \"toIncluded\": true\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/reward",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"reward"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "STEP5-Update Initiative Refund Rule",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative creation - STEP5 - (Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/*const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"const accumulatedType = [\"BUDGET_EXHAUSTED\",\"THRESHOLD_REACHED\"];\r",
																	"accumulatedTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"\r",
																	"pm.collectionVariables.set('timeType', timeType[timeTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('accumulatedType', accumulatedType[accumulatedTypeRandomIndex]);\r",
																	"pm.collectionVariables.set('identificationCode', pm.variables.replaceIn('{{$randomLoremSentence}}'));\r",
																	"*/\r",
																	"\r",
																	"\r",
																	"let refundType = [\"timeParameter\", \"accumulatedAmount\"];\r",
																	"refundTypeRandomIndex = _.random(0, refundType.length - 1);\r",
																	"\r",
																	"const refundTypeSelected = refundType[refundTypeRandomIndex];\r",
																	"let body = {};\r",
																	"if (refundTypeSelected == \"timeParameter\") {\r",
																	"    const timeType = [\"CLOSED\",\"DAILY\",\"WEEKLY\",\"MONTHLY\",\"QUARTERLY\"];\r",
																	"    timeTypeRandomIndex = _.random(0, timeType.length-1);\r",
																	"    body = {\r",
																	"        timeParameter: {\r",
																	"            timeType: timeType[timeTypeRandomIndex]\r",
																	"        }\r",
																	"    };\r",
																	"} else {\r",
																	"    const accumulatedType = [\"BUDGET_EXHAUSTED\", \"THRESHOLD_REACHED\"];\r",
																	"    accumulatedTypeRandomIndex = _.random(0, accumulatedType.length - 1);\r",
																	"    const accumulatedTypeSelected = accumulatedType[accumulatedTypeRandomIndex];\r",
																	"    if (accumulatedTypeSelected == \"BUDGET_EXHAUSTED\") {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"BUDGET_EXHAUSTED\"\r",
																	"            }\r",
																	"        };\r",
																	"    } else {\r",
																	"        body = {\r",
																	"            accumulatedAmount: {\r",
																	"                accumulatedType: \"THRESHOLD_REACHED\",\r",
																	"                refundThreshold: 10\r",
																	"            }\r",
																	"        };\r",
																	"    }\r",
																	"}\r",
																	"\r",
																	"pm.collectionVariables.set('body', JSON.stringify(body));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{body}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlInitiative}}/:initiativeId/refund",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																":initiativeId",
																"refund"
															],
															"variable": [
																{
																	"key": "initiativeId",
																	"value": "{{initiativeId}}",
																	"description": "(Required) The initiative ID"
																}
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "PAGOPA - Initiative update status APPROVED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative updating - Generate Portal Token (PagoPA Admin)', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalTokenPagopa\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Pagopa}}\",\r\n  \"name\": \"{{name_Pagopa}}\",\r\n  \"familyName\": \"{{familyName_Pagopa}}\",\r\n  \"email\": \"{{email_Pagopa}}\",\r\n  \"orgId\": \"{{orgId_Pagopa}}\",\r\n  \"orgVAT\": \"{{orgVAT_Pagopa}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Pagopa}}\",\r\n  \"orgRole\": \"{{orgRole_Pagopa}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Update initiative into APPROVED status",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Initiative updating - PagoPA Admin updates initiative status into APPROVED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"//setTimeout(function(){}, 20000); //milliseconds"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalTokenPagopa}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/approved",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"approved"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "ENTE - Initiative PUBLISHED",
											"item": [
												{
													"name": "Generate Portal Token",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"let textResponse = pm.response.text()\r",
																	"\r",
																	"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen readmission', () => {\r",
																	"    //verify response HTTP status \r",
																	"    pm.response.to.have.status(200);\r",
																	"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
																	"});\r",
																	"\r",
																	"//response time is less than 1s\r",
																	"tests[\"Response time is less than 1s\"] = responseTime < 1000;"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"aud\": \"idpay.welfare.pagopa.it\",\r\n  \"uid\": \"{{uid_Ente}}\",\r\n  \"name\": \"{{name_Ente}}\",\r\n  \"familyName\": \"{{familyName_Ente}}\",\r\n  \"email\": \"{{email_Ente}}\",\r\n  \"orgId\": \"{{orgId_Ente}}\",\r\n  \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n  \"orgName\": \"Ente di test IdPay\",\r\n  \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n  \"orgRole\": \"{{orgRole_Ente}}\"\r\n}\r\n",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrlToken}}/welfare/token/test",
															"host": [
																"{{baseUrlToken}}"
															],
															"path": [
																"welfare",
																"token",
																"test"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initiative PUBLISHED",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - Initiative pubblication - Ente Admin updates initiative status into PUBLISHED -(Responses with 204)\", function () {\r",
																	"    pm.response.to.have.status(204);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"setTimeout(()=> {}, 30000)",
																	"/*let body;\r",
																	"baseUrlInitiative = pm.variables.get('baseUrlInitiative')\r",
																	"if(baseUrlInitiative.includes('localhost')){\r",
																	"    body = {\r",
																	"        mode: 'raw',\r",
																	"        raw: JSON.stringify({\r",
																	"            organizationName: 'Comune di Milano',\r",
																	"            organizationFiscalCode: '11122233344',\r",
																	"            organizationUserId: 'b8986bf2-1f93-4827-ab16-b21eb8aeae2b',\r",
																	"            organizationUserRole: 'admin'\r",
																	"        })\r",
																	"    }\r",
																	"    pm.request.headers.add({\r",
																	"        key: \"Content-Type\",\r",
																	"        value: \"application/json\"\r",
																	"    });\r",
																	"    pm.variables.set('body', JSON.stringify(body));\r",
																	"    pm.request.body.update(body);\r",
																	"}\r",
																	"*/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disabledSystemHeaders": {}
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{identityPortalToken}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrlInitiative}}/{{initiativeId}}/published",
															"host": [
																"{{baseUrlInitiative}}"
															],
															"path": [
																"{{initiativeId}}",
																"published"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen readmission', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Readmit KO - Status INVITED",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - readmitting ON_EVALUATION citizen from the initiative - checking status 200', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													},
													{
														"key": "Fiscal-Code",
														"value": "{{fiscalCode_fakeWhitelist}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/reward/readmit",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"reward",
														"readmit"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding only Accept TC",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 60000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															" \r",
															"if (jsonResponse.status !== 'ACCEPTED_TC') {\r",
															"    retryRequest(postman, pm, setTimeout, 5000);\r",
															"} else {\r",
															"\r",
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - status ACCEPTED_TC\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).equals('ACCEPTED_TC');\r",
															"});\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										},
										{
											"name": "Generate Portal Token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen readmission', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrlToken}}/welfare/token/test",
													"host": [
														"{{baseUrlToken}}"
													],
													"path": [
														"welfare",
														"token",
														"test"
													]
												}
											},
											"response": []
										},
										{
											"name": "Readmit KO - Status ACCEPT_TC",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"let textResponse = pm.response.text()\r",
															"\r",
															"pm.test('Readmission - Unhappy case - Try to readmit CIT in status ON_EVALUATION, ACCEPTED_TC (WALLET NOT FOUND) - readmission ONBOARDING_KO citizen from the initiative - checking status 200', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{identityPortalToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													},
													{
														"key": "Fiscal-Code",
														"value": "{{fiscalCode_fakeWhitelist}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrlInitiative}}/{{initiativeId}}/reward/readmit",
													"host": [
														"{{baseUrlInitiative}}"
													],
													"path": [
														"{{initiativeId}}",
														"reward",
														"readmit"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 2",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 60000)\r",
															"pm.collectionVariables.set(\"fiscalCode_ko\", pm.variables.replaceIn(\"{{fiscalCode_fakeWhitelist}}\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{CF_fake_1}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{CF_fake_1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Accept T&C",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Accept T&C - return status 204\", function () {\r",
															"    pm.response.to.have.status(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Prerequisites Check - return status 403\", function () {\r",
															"    pm.expect(pm.response.code).equals(403);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let jsonResponse = pm.response.json()\r",
															" \r",
															"if (jsonResponse.status !== 'ONBOARDING_KO') {\r",
															"    retryRequest(postman, pm, setTimeout, 5000);\r",
															"} else {\r",
															"\r",
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - status ONBOARDING_KO\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).equals('ONBOARDING_KO');\r",
															"});\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Onboarding 3",
									"item": [
										{
											"name": "Generate Token IO",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Generate Token IO', () => {\r",
															"    //verify response HTTP status \r",
															"    pm.response.to.have.status(200);\r",
															"    pm.collectionVariables.set(\"tokenIO\", pm.response.text());\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"//setTimeout(()=> {}, 60000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{genericSubscriptionKey}}",
														"type": "default"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "default"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/rtd/mock-io/login?fiscalCode={{fiscalCode_fakeWhitelist}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"rtd",
														"mock-io",
														"login"
													],
													"query": [
														{
															"key": "fiscalCode",
															"value": "{{fiscalCode_fakeWhitelist}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Prerequisites Check",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Prerequisites Check - return status 200 or 202\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200,202]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Ocp-Apim-Subscription-Key",
														"value": "{{apimSubscriptionKey}}",
														"type": "text"
													},
													{
														"key": "Ocp-Apim-Trace",
														"value": "true",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/initiative",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"initiative"
													]
												}
											},
											"response": []
										},
										{
											"name": "PDND + Autocertification",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - PDND + Autocertification - return status 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"initiativeId\" : \"{{initiativeId}}\",\r\n    \"pdndAccept\": true,\r\n    \"selfDeclarationList\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/consent",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"consent"
													]
												}
											},
											"response": []
										},
										{
											"name": "Status Onboarding",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"setTimeout(()=>{ \r",
															"\r",
															"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - status ONBOARDING_KO\", function () {\r",
															"    let jsonResponse = pm.response.json()\r",
															"    pm.expect(jsonResponse.status).equals('ONBOARDING_OK');\r",
															"});\r",
															" },2000)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"setTimeout(()=> {}, 15000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{tokenIO}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"idpay",
														"onboarding",
														"{{initiativeId}}",
														"status"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Unsubscribe - Ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Unsubscribed wallet & user - Unsubscribe - Response status is 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(() => {}, 10000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Ocp-Apim-Subscription-Key",
												"value": "{{apimSubscriptionKey}}",
												"type": "text"
											},
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/idpay/wallet/{{initiativeId}}/unsubscribe",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"wallet",
												"{{initiativeId}}",
												"unsubscribe"
											]
										}
									},
									"response": []
								},
								{
									"name": "Status Onboarding",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// setTimeout(()=> {}, 15000)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let jsonResponse = pm.response.json()\r",
													" \r",
													"if (jsonResponse.status !== 'UNSUBSCRIBED') {\r",
													"    retryRequest(postman, pm, setTimeout, 5000);\r",
													"} else {\r",
													"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - return status 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Onboarding - Status Onboarding - status UNSUBSCRIBED\", function () {\r",
													"    let jsonResponse = pm.response.json()\r",
													"    pm.expect(jsonResponse.status).equals('UNSUBSCRIBED');\r",
													"});\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{tokenIO}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/idpay/onboarding/{{initiativeId}}/status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"idpay",
												"onboarding",
												"{{initiativeId}}",
												"status"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Generate Portal Token (Ente Admin) for citizen readmission', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Readmit KO - Status ONBOARDING_KO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - readmitting ONBOARDING_KO citizen from the initiative - checking status 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{CF_1}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/reward/readmit",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"reward",
												"readmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Readmit KO - Status UNSUBSCRIBED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Readmission - Unhappy case - Try to readmit CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - readmitting UNSUBSCRIBED citizen from the initiative - checking status 200', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{fiscalCode_fakeWhitelist}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId}}/reward/readmit",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId}}",
												"reward",
												"readmit"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Initiative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Readmission - Unhappy case - Try to suspend CIT in status INVITED,ONBOARDING_KO,UNSUBSCRIBED (WALLET NOT FOUND) - Delete Initiative - Status test 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative/idpay/initiative/{{initiativeId}}",
											"host": [
												"{{AKSAPIServerUrlGeneric}}idpayportalwelfarebackendinitiative"
											],
											"path": [
												"idpay",
												"initiative",
												"{{initiativeId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Try to readmit CIT with an initiative Id fake - 404",
							"item": [
								{
									"name": "Generate Portal Token",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Initiative with criteria - Happy case - Initiative creation - Generate Portal Token (Ente Admin)', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(200);\r",
													"    pm.collectionVariables.set(\"identityPortalToken\", textResponse);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"aud\": \"idpay.welfare.pagopa.it\",\r\n    \"uid\": \"{{uid_Ente}}\",\r\n    \"name\": \"{{name_Ente}}\",\r\n    \"familyName\": \"{{familyName_Ente}}\",\r\n    \"email\": \"{{email_Ente}}\",\r\n    \"orgId\": \"{{orgId_Ente}}\",\r\n    \"orgVAT\": \"{{orgVAT_Ente}}\",\r\n    \"orgName\": \"Ente di test IdPay\",\r\n    \"orgPartyRole\": \"{{orgPartyRole_Ente}}\",\r\n    \"orgRole\": \"{{orgRole_Ente}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrlToken}}/welfare/token/test",
											"host": [
												"{{baseUrlToken}}"
											],
											"path": [
												"welfare",
												"token",
												"test"
											]
										}
									},
									"response": []
								},
								{
									"name": "Readmit",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"let textResponse = pm.response.text()\r",
													"\r",
													"pm.test('Readmission - Unhappy case - Try to readmit CIT with initiativeId fake - readmitting citizen from the initiative - checking status 404', () => {\r",
													"    //verify response HTTP status \r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test('Readmission - Unhappy case - Try to readmit CIT with initiativeId fake - readmitting citizen from the initiative - checking error code', () => {\r",
													"    const responseJson = pm.response.json();\r",
													"    pm.expect(responseJson.code).to.eql(\"REWARD_NOTIFICATION_INITIATIVE_NOT_FOUND\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{identityPortalToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Ocp-Apim-Trace",
												"value": "true",
												"type": "default"
											},
											{
												"key": "Fiscal-Code",
												"value": "{{fiscalCode_fakeWhitelist}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrlInitiative}}/{{initiativeId-fake}}/reward/readmit",
											"host": [
												"{{baseUrlInitiative}}"
											],
											"path": [
												"{{initiativeId-fake}}",
												"reward",
												"readmit"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"retryRequest = (postman, pm, setTimeout, waitingMillis = 500, maxAttempts = 10) => {",
					"    if(!postman || !pm || !setTimeout){",
					"        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: postman=\" + postman + \", pm=\" + pm + \", setTimeout=\" + setTimeout)",
					"    }",
					" ",
					"    const retryVariableName = \"retry_\" + pm.info.requestId",
					"    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;",
					"    if(attempt < maxAttempts) {",
					"        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");",
					"        pm.variables.set(retryVariableName, attempt)",
					"        postman.setNextRequest(pm.info.requestId);",
					"        return setTimeout(()=>{}, waitingMillis);",
					"    } else {",
					"        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));",
					"    }",
					"}",
					"",
					"if(pm.response.code == 429){",
					"    console.log(\"Obtained 429! Performing retry...\")",
					"    retryRequest(postman, pm, setTimeout);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "identityPortalToken",
			"value": ""
		},
		{
			"key": "serviceName",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "channel_type",
			"value": ""
		},
		{
			"key": "channel_contact",
			"value": ""
		},
		{
			"key": "initiativeId",
			"value": "6502c744925c4253e402a633"
		},
		{
			"key": "budget",
			"value": ""
		},
		{
			"key": "beneficiaryType",
			"value": ""
		},
		{
			"key": "beneficiaryKnown",
			"value": ""
		},
		{
			"key": "beneficiaryBudget",
			"value": ""
		},
		{
			"key": "rankingStartDate",
			"value": ""
		},
		{
			"key": "rankingEndDate",
			"value": ""
		},
		{
			"key": "startDate",
			"value": ""
		},
		{
			"key": "endDate",
			"value": ""
		},
		{
			"key": "rewardRuleType",
			"value": ""
		},
		{
			"key": "rewardRuleFrom",
			"value": ""
		},
		{
			"key": "rewardRuleTo",
			"value": ""
		},
		{
			"key": "rewardRuleValue",
			"value": ""
		},
		{
			"key": "trxDaysOfWeek",
			"value": ""
		},
		{
			"key": "trxDayEndTime",
			"value": ""
		},
		{
			"key": "trxThresholdFrom",
			"value": ""
		},
		{
			"key": "trxThresholdTo",
			"value": ""
		},
		{
			"key": "trxCountFrom",
			"value": ""
		},
		{
			"key": "trxCountTo",
			"value": ""
		},
		{
			"key": "trxRewardLimitFrequency",
			"value": ""
		},
		{
			"key": "trxRewardLimitValue",
			"value": ""
		},
		{
			"key": "timeType",
			"value": ""
		},
		{
			"key": "identificationCode",
			"value": ""
		},
		{
			"key": "identityPortalTokenPagopa",
			"value": ""
		},
		{
			"key": "accumulatedType",
			"value": ""
		},
		{
			"key": "body",
			"value": ""
		},
		{
			"key": "initiativeId-fake",
			"value": "fake_initiativeId"
		},
		{
			"key": "rewardValueType",
			"value": ""
		},
		{
			"key": "basePath",
			"value": "./postman"
		},
		{
			"key": "rankingEnabled",
			"value": ""
		},
		{
			"key": "tokenIO",
			"value": ""
		},
		{
			"key": "yesterday",
			"value": ""
		},
		{
			"key": "ruleIsee",
			"value": ""
		},
		{
			"key": "onboardingMax",
			"value": ""
		},
		{
			"key": "ruleIseeCents",
			"value": ""
		},
		{
			"key": "fiscalCode_fakeWhitelist",
			"value": "RNZPMP80A44X000M"
		},
		{
			"key": "initiativeId-suspend",
			"value": ""
		},
		{
			"key": "idwallet",
			"value": "110454"
		},
		{
			"key": "StaticInitiativeIDReward",
			"value": "64351fa1dfa13673aaa46a07"
		},
		{
			"key": "staticExportId",
			"value": "64351fa1dfa13673aaa46a07_20230411.1"
		},
		{
			"key": "staticRefundId",
			"value": "04f4f408-ab36-4dcd-a526-c82066b51a84_64351fa1dfa13673aaa46a07"
		},
		{
			"key": "fileImportName",
			"value": ""
		},
		{
			"key": "initiativeId-suspend2",
			"value": ""
		},
		{
			"key": "initiativeId-suspend3",
			"value": ""
		},
		{
			"key": "familyUnitComposition",
			"value": ""
		},
		{
			"key": "CF_fake_1",
			"value": "DSUFLV81R19X000P",
			"type": "string"
		},
		{
			"key": "CF_fake_2",
			"value": "BRTVNL63E26X000U",
			"type": "string"
		},
		{
			"key": "CF_fake_3",
			"value": "BRNBNT22S45X000B",
			"type": "string"
		},
		{
			"key": "CF_fake_4",
			"value": "FRNDLS40E21X000V",
			"type": "string"
		},
		{
			"key": "CF_fake_5",
			"value": "SCTNNZ22S12X000S",
			"type": "string"
		},
		{
			"key": "CF_fake_6",
			"value": "TRLLGU25M64X000A",
			"type": "string"
		},
		{
			"key": "CF_fake_7",
			"value": "LCRGNN67E02X000W",
			"type": "string"
		},
		{
			"key": "CF_fake_8",
			"value": "PRLCPN58E63X000Q",
			"type": "string"
		},
		{
			"key": "CF_fake_9",
			"value": "RMGSLT57B45X000W",
			"type": "string"
		},
		{
			"key": "CF_fake_10",
			"value": "CHGNNT05D07X000K",
			"type": "string"
		},
		{
			"key": "CF_fake_11",
			"value": "CRDLNI26L01X000S",
			"type": "string"
		},
		{
			"key": "CF_fake_12",
			"value": "PCCGCN01T44X000E",
			"type": "string"
		},
		{
			"key": "CF_fake_13",
			"value": "PGFPRL93M41X000B",
			"type": "string"
		},
		{
			"key": "CF_fake_14",
			"value": "GNTMNC08M03X000U",
			"type": "string"
		},
		{
			"key": "CF_fake_15",
			"value": "TMOVNC75S46X000F",
			"type": "string"
		},
		{
			"key": "fiscalCode_ko",
			"value": ""
		}
	]
}