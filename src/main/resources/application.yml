api.key.encrypt: ${PDV_ENCRYPT_API_KEY:}
api.key.decrypt: ${PDV_DECRYPT_API_KEY:}
spring.servlet.multipart.max-file-size: ${MULTIPART_MAX_FILE_SIZE:1MB}
spring.servlet.multipart.resolve-lazily: true
spring.servlet.multipart.file-size-threshold: ${MULTIPART_MAX_FILE_SIZE:1MB}
blobStorage.connectionString: ${BLOB_STORAGE_CONNECTION_STRING:}
blobStorage.initiative.logo.containerReference: ${BLOB_STORAGE_CONTAINER_REFERENCE:}

mongo:
  request-rate-too-large:
    api:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_API_ENABLED:false}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_RETRY:0}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_API_MAX_MILLIS_ELAPSED:200}
    batch:
      enabled: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_ENABLED:true}
      max-retry: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_RETRY:5}
      max-millis-elapsed: ${MONGO_REQUEST_RATE_TOO_LARGE_BATCH_MAX_MILLIS_ELAPSED:0}

spring:
  application:
    name: "@project.artifactId@"
    version: "@project.version@"
  jmx.enabled: true
  data:
    mongodb:
      uri: ${MONGODB_URI:mongodb://localhost:27017}
      database: ${MONGODB_DBNAME:idpay}
      # custom configured properties
      config:
        connectionPool:
          maxSize: ${MONGODB_CONNECTIONPOOL_MAX_SIZE:100}
          minSize: ${MONGODB_CONNECTIONPOOL_MIN_SIZE:0}
          maxWaitTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_WAIT_MS:120000}
          maxConnectionLifeTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_LIFE_MS:0}
          maxConnectionIdleTimeMS: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTION_IDLE_MS:120000}
          maxConnecting: ${MONGODB_CONNECTIONPOOL_MAX_CONNECTING:2}
  cloud:
    stream:
      binders:
        kafka-initiative-outcome:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              configuration:
                sasl.jaas.config: ${KAFKA_INITIATIVE_SASL_JAAS_CONFIG:}
        kafka-commands-outcome:
          type: kafka
          environment:
            spring.cloud.stream.kafka.binder:
              configuration:
                sasl.jaas.config: ${KAFKA_COMMANDS_SASL_JAAS_CONFIG:}
      bindings:
        initiativeQueue-out-0:
          binder: kafka-initiative-outcome
          destination: ${KAFKA_INITIATIVE_OUTCOME_TOPIC:idpay-rule-update}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
        commandsQueue-out-0:
          binder: kafka-commands-outcome
          destination: ${KAFKA_COMMANDS_OUTCOME_TOPIC:idpay-commands}
          content-type: ${KAFKA_CONTENT_TYPE:application/json}
      kafka:
        binder:
          auto-create-topics: 'false'
          brokers: ${KAFKA_BINDER_BROKER_ENDPOINT_LIST}
          configuration:
            heartbeat.interval.ms: ${KAFKA_CONFIG_INITIATIVE_HEARTBEAT_INTERVAL_MS:3000}
            request.timeout.ms: ${KAFKA_CONFIG_INITIATIVE_REQUEST_TIMEOUT_MS:60000}
            session.timeout.ms: ${KAFKA_CONFIG_INITIATIVE_SESSION_TIMEOUT_MS:60000}
            sasl.mechanism: ${KAFKA_INITIATIVE_SASL_MECHANISM}
            security.protocol: ${KAFKA_INITIATIVE_SECURITY_PROTOCOL}
            connections.max.idle.ms: ${KAFKA_CONFIG_CONNECTION_MAX_IDLE_TIME:180000}
            metadata.max.idle.ms: ${KAFKA_CONFIG_METADATA_MAX_IDLE_MS:180000}
            metadata.max.age.ms: ${KAFKA_CONFIG_METADATA_MAX_AGE_INTERVAL:180000}
            max.request.size: ${KAFKA_CONFIG_METADATA_MAX_REQUEST_SIZE:1000000}
        bindings:
          initiativeQueue-out-0:
            producer:
              configuration:
                client.id: initiativeQueue-producer
                retry.backoff.ms: ${KAFKA_INITIATIVE_PRODUCER_CONFIG_RETRY_BO_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_INITIATIVE_PRODUCER_CONFIG_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_INITIATIVE_PRODUCER_CONFIG_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
                metadata.max.idle.ms: ${KAFKA_INITIATIVE_PRODUCER_DEFAULT_METADATA_MAX_IDLE_MS:180000}
          commandsQueue-out-0:
            producer:
              configuration:
                client.id: commandsQueue-producer
                retry.backoff.ms: ${KAFKA_COMMANDS_PRODUCER_CONFIG_RETRY_BO_MS:${KAFKA_RETRY_MS:10000}}
                linger.ms: ${KAFKA_COMMANDS_PRODUCER_CONFIG_LINGER_MS:${KAFKA_LINGER_MS:2}}
                batch.size: ${KAFKA_COMMANDS_PRODUCER_CONFIG_BATCH_SIZE:${KAFKA_BATCH_SIZE:16384}}
                metadata.max.idle.ms: ${KAFKA_COMMANDS_PRODUCER_DEFAULT_METADATA_MAX_IDLE_MS:180000}
    openfeign:
      okhttp:
        enabled: true
      client:
        config:
          default:
            errorDecoder: it.gov.pagopa.initiative.connector.error.decoder.Custom5xxErrorDecoder
            retryer: feign.Retryer.Default
          backend-io:
            loggerLevel: ${FEIGN_CLIENT_CONFIG_IO_LOG_LEVEL:basic}
          ms-group:
            loggerLevel: ${FEIGN_CLIENT_CONFIG_IO_LOG_LEVEL:basic}

rest-client:
  backend-io:
    service:
      base-url: ${IO_BACKEND_SERVICE_BASE_URL:}/api/v1
      name: backend-io
      subscriptionKey: ${IO_BACKEND_SERVICE_SUBSCRIPTION_API_KEY:}
      request:
        departmentName: ${IO_BACKEND_SERVICE_DEPARTMENT_NAME:}
        isVisible: ${IO_BACKEND_SERVICE_IS_VISIBLE:false}
        authorizedRecipients: ${IO_BACKEND_SERVICE_AUTHORIZED_RECIPIENTS:}
  onboarding:
    serviceCode: idpay-onboarding
    uri: ${ONBOARDING_URI:}
  ranking:
    serviceCode: idpay-ranking
    uri: ${RANKING_URI:}
  encryptpdv:
    base-url: ${PDV_ENCRYPT_BASE_URL:}
    cf: ${PDV_ENCRYPT_SERVICE_CODE:pdv-ms-tokenizer-encrypt}
  decrypt:
    baseUrl: ${PDV_DECRYPT_BASE_URL:}
    cf: ${PDV_DECRYPT_SERVICE_CODE:pdv-ms-tokenizer}
  group:
    service:
      name: ms-group
      base-url: ${GROUP_MS_HOST:}/idpay
  email-notification:
    service:
      name: ms-email-notification
      base-url: ${EMAIL_NOTIFICATION_MS_HOST:}/idpay/email-notification
      path: /notify
  selc:
    service:
      base-url: ${SELC_BASE_URL:}/external/v1
      name: selc-prod-users
      subscriptionKey: ${SELC_EXTERNAL_API_KEY:}
      selfCareUid: ${SELC_UID:idpay}

management.endpoints:
  web:
    exposure.include: info, health

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    it.gov.pagopa: ${LOG_LEVEL_PAGOPA:INFO}
    it.gov.pagopa.initiative: ${LOG_LEVEL_INITIATIVE:INFO}
    org.springframework.cloud: ${LOG_LEVEL_SPRING_CLOUD:WARN}
    org.springframework.data: ${LOG_LEVEL_SPRING_DATA:INFO}
    org.springframework.boot: ${LOG_LEVEL_SPRING_BOOT:INFO}
    io.swagger: ${LOG_LEVEL_IO_SWAGGER:WARN}
    javax.persistence: ${LOG_LEVEL_JAVAX_PERSISTENCE:INFO}
    org.hibernate: ${LOG_LEVEL_ORG_HIBERNATE:INFO}
    org.mongodb.driver: ${LOG_LEVEL_MONGODB_DRIVER:WARN}

app:
  initiative:
    logo:
      allowed-mime-types: ${INSTITUTION_LOGO_ALLOWED_MIME_TYPES:image/png}
      allowed-extensions: ${INSTITUTION_LOGO_ALLOWED_EXTENSIONS:png}
      url: ${INITIATIVE_LOGO_URL}
    ranking:
      gracePeriod: ${RANKING_GRACE_PERIOD:10}
    conditions:
      notifyIO: ${APP_INITIATIVE_CONDITIONS_NOTIFY_IO:true}
      notifyRE: ${APP_INITIATIVE_CONDITIONS_NOTIFY_RE:true}
      notifyEmail: ${APP_INITIATIVE_CONDITIONS_NOTIFY_EMAIL:true}
      notifyInternal: ${APP_INITIATIVE_CONDITIONS_NOTIFY_INTERNAL:true}
    email-assistance: ${EMAIL_RECIPIENT_ASSISTANCE:Assistenza.IDPay@Pagopa.it}

util:
  crypto:
    aes:
      cipherInstance: ${UTIL_CRYPTO_AES_CIPHER_INSTANCE:AES/GCM/NoPadding}
      encoding: ${UTIL_CRYPTO_AES_ENCODING:UTF-8}
      secret-type:
        pbe:
          algorithm: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_ALGORITHM:PBKDF2WithHmacSHA1}
          salt: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_SALT:}
          keySize: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_KEY_SIZE:256}
          iterationCount: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_ITERATION_COUNT:10000}
          passphrase: ${UTIL_CRYPTO_AES_SECRET_TYPE_PBE_PASSPHRASE:}
      mode:
        gcm:
          iv: ${UTIL_CRYPTO_AES_MODE_GCM_IV:}
          tLen: ${UTIL_CRYPTO_AES_MODE_GCM_TAG_LEN:16}
